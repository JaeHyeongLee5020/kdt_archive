			## 자바스크립트에서 비교란?

-자바스크립트는 주어진 두 항을 비교할 수 있는 ‘비교 연산자’를 제공한다.
-자바스크립트는 다음 두 가지 유형의 비교를 할 수 있다.

-크다/작다		(대소 비교)
-같다/다르다	(등가 비교)




		# 비교 연산자의 특징

-비교 연산식은 언제나 boolean 데이터를 반환(return)한다.
-크다/작다를 비교하는 대/소비교, 같다/다르다를 비교하는 등가비교는 모두 하나의 질문이며
 그 질문에 대한 반환(return)값은 참(true), 거짓(flase) 두가지이다.

ex)	3 < 5	: true
ex)	3 > 5	: flase


	# 대소 비교

-대/소 비교는 다음 네 가지 연산자를 사용해 처리할 수 있다.
(연산자의 의미는 앞의 피연산자를 기준으로 정의했다.)

========================================================
       의미		|     연산자	| 	사용 형태		|  
========================================================
   크다		|       >		|	A > B		|
--------------------------------------------------------
   작다		|       <		|	A < B		|
--------------------------------------------------------
   크거나 같다	|       >=		|	A >= B		|
--------------------------------------------------------
   작거나 같다	|       <=		|	A <= B		|
========================================================






	# 등가 비교

# 등가 비교는 다음 네 가지 연산자를 사용해 처리할 수 있다.
# 개호의 개수를 확인하며 사용해야 한다. ()

=========================================================
       의미		|     연산자	| 	사용 형태		|  
=========================================================
   같다.		|     ==		|	A ==	 B	|
---------------------------------------------------------
   같지 않다.	|     !=		|	A != B		|
---------------------------------------------------------
   완전히 같다.	|     ===		|	A === B		|
---------------------------------------------------------
   완전히 같지 않다.	|     !==		|	A !== B		|
=========================================================

# 등가 비교시 등호(=)의 개수에 따라 비교 규칙에 차이가 있다.
# == 는 ‘추상적(abstract)’ 같음 비교로써 자료형이 서로 다르더라도 같다고 판단할 수 있는 등가 비교이다.
# === 는 ‘엄격한(strict)’ 같음 비교로써 자료형과 데이터가 모두 일치해야만 같다고 판한한다.
# !는 부정연산자(NOT)를 의미한다.

ex)
console.log(1 == 1);	// true
console.log('1' == 1);	// true
console.log('1' === 1);	// false







let boo1 = 3 < 5;
console.log(boo1);  // true

let boo2 = 3 > 5;
console.log(boo2);  // false

let boo3 = 5 <= 5;
console.log(boo3);  // true

let boo4 = 4 == 4;  // 타입이 달라도 값이 동일하면 true가 반환된다.
console.log(boo4);  // true

let boo5 = 4 != 4;
console.log(boo5);  // false

let boo6 = 4 === 4; // 타입과 값이 모두 동일한 경우에 true가 반환된다.
console.log(boo6);  // true

let boo7 = 4 !== 4;
console.log(boo7);  // false

let boo8 = 4 == '4';  // 타입이 달라도 값이 동일하면 true가 반환된다.
console.log(boo8);  // true

let boo9 = 4 === '4'; // 타입과 값이 모두 동일한 경우에 true가 반환된다.
console.log(boo9);  // false

let num1 = 10;
let num2 = 20;
console.log(num1 < num2);
console.log(num1 == num2);
console.log(num1 != num2);

// 논리형 타입은 조건문과 반복문에서 자주 사용된다.






















