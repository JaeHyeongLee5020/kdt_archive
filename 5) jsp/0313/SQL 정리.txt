select	: 확인
insert	: 입력 (저장)
update	: 수정
delete	: 삭제


select * from 테이블명			: 모든 컬럼 확인

select 컬럼명, 컬럼명, 컬럼명 from 테이블명 	: 지정된 컬럼 확인


create table 테이블명 (	: 테이블 생성
     컬럼명   데이터 타입    옵션1 옵션2 ,
     컬럼명   데이터 타입    옵션 ,
     컬럼명   데이터 타입    옵션 ,
     컬럼명   데이터 타입    옵션 ,
     컬럼명   데이터 타입    옵션
);

-데이터 타입
 # 문자	: CHAR(100) , VARCHAR2(4000), CLOB(4G)
 # 숫자	: NUMBER(정수 , 실수)
 # 날짜	: DATE

-CLOB (Character Large Object)
 # CLOB(Character Large Object)는 최대 4GB까지 문자 데이터를 저장할 수 있음
 # 텍스트 데이터(긴 문장, 문서, JSON 데이터 등)를 저장할 때 사용
 # CLOB 컬럼은 인덱싱이 제한적 (일반적인 VARCHAR2 컬럼보다 검색이 느릴 수 있음)

-옵션
 # primary key	: 컬럼의 중복 불가, 하나의 컬럼만 적용 가능 (보통 id와 같은 컬럼에 적용한다.)
 # unique		: 해당 컬럼의 중복을 허용하지 않는다. (primary key는 하나의 컬럼에만 적용 가능)
 # not null		: null 값을 허용하지 않는다. (예를 들어 회원 가입시 필수 정보)
 # default		: 설정하지 않을경우 기본값으로 적용할 값
 # check()		: 조건문 (일반적으로 number에 적용 예를 들어 0 ~ 100까지만 허용)
		  EX) check (컬럼명 > 0 and 컬럼명 < 100)

create table test(
	id	varchar2(50)  primary key,
	pw	varchar2(50)  not null,
	age	number(10) default 18 check(age > 18 and age < 65),
	birth	date

);

drop table 테이블명;


-레코드 추가

	insert into 테이블명 values(id값, pw값, age값, birth값);	// 모든 컬럼값을 순서대로 모두 작성

	insert into 테이블명(컬럼명, 컬럼명) values(컬럼값, 컬럼값); 	// 특정 컬럼의 값만 작성


	insert into test values('java', '1234', 25, '25/03/13');	// 모든 컬럼값을 순서대로 모두 작성

	insert into test(id, pw) values('jsp', '1234'); 		// 특정 컬럼의 값만 작성



-레코드 수정

	update 테이블명 set 컬럼명=변경값;	-- 해당 컬럼의 모든 값이 변경된다.


	update 테이블명 set 컬럼명=변경값 where 컬럼명=값;

	update test set pw='1212' where id='java';


-레코드 삭제
	delete from 테이블명;		-- 해당 테이블의 모든 레코드를 삭제

	delete from 테이블명 where 조건식;	-- 조건식에 만족하는 레코르를 삭제

	delete from test where id='java';




-테이블 수정

--member 테이블의 phone 컬럼의 이름을 smart_phone으로 변경
alter table member rename column phone to smart_phone;

--member 테이블의 status 컬럼의 데이터 타입을 VARCHAR2로 변경
alter table member modify status varchar2(10);

--member 테이블의 smart_phone의 옵션을 not null로 변경
alter table member modify smart_phone varchar2(13) not null;

--member 테이블의 마지막 로그인 시간을 기록하는 last_login 컬럼을 추가
alter table member add last_login date;

--member 테이블의 status 컬럼을 삭제
alter table member drop column status;




	## 특정 테이블 검색

select 컬럼명  from  테이블명;

select * from emp;
select ename, sal, deptno from emp;


select ename, sal * 0.9, hiredate, deptno from emp;

-- 문자열 연결
select empno, ename || '_USA' , job, '연봉 : ' || sal || '$' from emp;


--부서 번호가 10인 사원의 전체 정보
select * from emp where deptno = 10;


--부서 번호가 10인 사원의 수
select count(*) from emp where deptno = 10;


--부서 번호가 10 또는 20인 사원의 전체 정보
select * from emp where deptno = 10 or deptno=20;


--연봉이 2500이상인 사원의 전체 정보
select * from emp where sal > 2500;


--부서 번호가 20인 사원중 연봉이 2500이상인 사원의 전체 정보
select * from emp where deptno=20 and sal > 2500;

select * from emp where sal > 2000 AND sal < 5000;



--alias (별칭)
select ename as 이름, sal as 연봉 from emp;
select ename as 이름, sal * 0.85 as 실수령액 from emp;







	# where절을 활용한 조건 검색


-- 사원 번호가 7782인 사원의 전체 정보
select * from emp where empno=7782;


-- 사원 번호가 7782인 사원의 이름, 직책, 연봉 컬럼만 출력
select ename, job, sal from emp;


--부서 번호가 10 또는 30인 사원의 전체 정보
select * from emp where deptno=10 or deptno=30;
select * from emp where deptno in (10, 30);


--연봉이 1300이상이고 2500 이하인 사원의 전체 정보
select * from emp where sal >= 1300 AND sal <= 2500;
select * from emp where sal between 1300 and 2500;


--직책이 SALESMAN이 아닌 사원의 전체 정보
select * from emp where job <> 'SALESMAN';
select * from emp where job != 'SALESMAN';


--연봉이 1300이상이고 2500 이하인 사원을 제외한 전체 정보
select * from emp where not (sal >= 1300 AND sal <= 2500);


--부서 번호가 10 또는 30인 사원을 제외한 나머지 전체 정보
select * from emp where deptno not in (10, 30);

--성과급 컬럼 값이 null인 전체 정보
select * from emp where comm is null;


--성과급 컬럼 값이 null이 아닌 전체 정보
select * from emp where comm is not null;


--성과급을 받은 직원 전체 정보
select * from emp where comm > 0;


--81년 6월 1일 이후 입사한 사원의 전체 정보
select * from emp where hiredate > to_date('1981-06-01', 'yyyy-mm-dd');






    # 검색 기능 (like)

--ename 컬럼의 이름중 S로 시작하는 사원의 정보
select * from emp where ename like 'S%';


--ename 컬럼의 이름중 S로 끝나는 사원의 정보
select * from emp where ename like '%S';


--ename 컬럼의 이름중 S가 포함된 사원의 정보
select * from emp where ename like '%S%';

--ename 컬럼의 이름중 S, C가 포함된 사원의 정보
select * from emp where ename like '%S%C%';


--ename 컬럼의 이름중 두번째 글자가 C인 사원의 정보
select * from emp where ename like '_C%';


--ename 컬럼의 이름중 세번째 글자가 C인 사원의 정보
select * from emp where ename like '__I%';


--ename 컬럼의 이름중 두번째 글가 C가 아닌 사원의 정보
select * from emp where ename not like '_C%';


--ename 컬럼의 이름중 S가 포함되지 않은 사원의 정보
select * from emp where ename not like '%S%';


--lower(ename) : 대/소문자를 구분하지 않는다.
select * from emp where lower(ename) like 's%';





    # 레코드 정렬 (order by)

select 컬럼명 from 테이블명 order by 커럼명 asc;	// 오름 차순 정렬 (기본값이 asc이므로 생략 가능)
select 컬럼명 from 테이블명 order by 커럼명 desc;	// 내림 차순 정렬


select * from emp order by sal asc;     	-- sal 컬럼을 기준으로 올림차순 정렬
select * from emp order by sal desc;    	-- sal 컬럼을 기준으로 내림차순 정렬

select * from emp order by deptno asc;     	-- deptno 컬럼을 기준으로 올림차순 정렬
select * from emp order by deptno desc;    	-- deptno 컬럼을 기준으로 내림차순 정렬

select * from emp order by ename asc;       	-- ename 컬럼을 기준으로 올림차순 정렬
select * from emp order by ename desc;       	-- ename 컬럼을 기준으로 내림차순 정렬

-- 부서 번호 컬럼을 기준으로 오름차순 정렬후 같은 부서 내에서 sal 컬럼으로 오름차순 정렬
select * from emp order by deptno, sal;

-- 부서 번호 컬럼을 기준으로 오름차순 정렬후 같은 부서 내에서 ename 컬럼으로 오름차순 정렬
select * from emp order by deptno, ename;

-- 연봉이 1000보다 크고 3000보다 작은 직원 정보를 부서 번호를 사용하여 정렬후 연봉 오름차순 정렬
select * from emp where (sal > 1000 and sal < 3000) order by deptno, sal;



	# 중첩 select문

select ename, job, sal from                 	-- 새로운 select를 만든다.
    (select * from emp where sal > 2000)	-- 해당 쿼리문의 결과로
where job ='MANAGER';

select ename, job, sal from emp where sal > 2000 and job='MANAGER';


select * from
    (select ename e, job j, sal s, deptno d from emp)
where s > 2500 order by d, s;





	# 집계 함수
select * from emp;              -- 테이블 전체의 모든 레코드를 확인

select count(*) from emp;       -- 테이블 전체의 모든 레코드 수

select count(*) cnt from emp;   -- 테이블 전체의 모든 레코드 수 (별칭)

select count(*) comm_null from emp where comm is null;  -- comm이 null인 사원의 수

select max(sal) from emp;   -- emp 테이블에서 sal 컬럼의 최대 값
select min(sal) from emp;   -- emp 테이블에서 sal 컬럼의 최소 값

select sum(sal) from emp;   -- emp 테이블에서 sal 컬럼값을 더한 값
select avg(sal) from emp;   -- emp 테이블에서 sal 컬럼의 평균값



--ceil()    : 올림 , round()   : 반올림 , floor()   : 버림

-- dual : 가상의 테이블로 간단한 계산식을 적용시 사용한다.
select round(10.123) from dual; -- 10
select round(10.567) from dual; -- 11

select ceil(10.123) from dual; -- 11
select ceil(10.567) from dual; -- 11

select floor(10.123) from dual; -- 10
select floor(10.567) from dual; -- 10



































