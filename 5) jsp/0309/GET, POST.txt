		# GET 방식

-데이터 전송 위치: URL에 쿼리 스트링(Query String)으로 데이터를 전송 (예: ?key=value).

    	# 특징
-문자(text)만 전송 가능하다.
 : 숫자나 특수 문자를 포함한 문자열을 전송할 수 있지만, 바이너리 데이터(파일 등)는 전송할 수 없다.

-URL에 변수(데이터)를 포함시켜 요청한다.
 : 예를 들어, https://example.com/search?query=hello&category=books 와 같은 형식으로 요청을 보낼 수 있다.

-데이터를 Header(헤더)에 포함하여 전송한다.
 : 요청 시 일부 데이터는 헤더에도 포함될 수 있지만, 본문(Body)이 없기 때문에 대부분의 데이터는 URL에 포함된다.

-URL에 데이터가 노출되어 보안에 취약하다.
 : 브라우저의 주소창에 그대로 표시되므로 비밀번호와 같은 민감한 데이터를 GET 요청으로 전송하는 것은 적절하지 않다.

-북마크(즐겨찾기) 및 공유가 용이하다.
 : 요청 파라미터가 URL에 포함되므로, 특정 페이지의 검색 결과 등을 그대로 저장하거나 공유할 수 있다.

	# 사용 예
검색 요청 (https://example.com/search?query=java)
특정 페이지 이동 (https://example.com/page?id=123)

		# POST 방식
주요 용도: 서버에 데이터를 전송하거나 상태를 변경할 때 사용.
데이터 전송 위치: HTTP 요청 본문(Body)에 데이터를 전송.

	# 특징
-URL에 변수(데이터)를 노출하지 않고 요청한다.
 :　예를 들어, 로그인 시 아이디와 비밀번호를 URL에 포함하지 않고 요청 본문에 포함하여 보낸다.

-데이터를 Body(바디)에 포함시킨다.
 :　JSON, XML, 폼 데이터 등 다양한 형식으로 데이터를 전송할 수 있다.

-바이너리 데이터(파일 등) 전송이 가능하다.
 :　파일 업로드 시에도 POST 방식이 주로 사용된다.

-URL에 데이터가 노출되지 않기에 기본적인 보안은 보장된다.
 :　하지만, HTTPS를 사용하지 않으면 네트워크에서 데이터를 가로챌 수 있으므로 주의해야 한다.

-북마크가 불가능하다.
 :　요청 데이터가 URL에 포함되지 않기 때문에 특정 상태를 저장할 수 없다.

	# 사용 예
로그인 (POST /login)
회원가입 (POST /register)
파일 업로드 (POST /upload)
데이터 생성 (POST /api/users)












