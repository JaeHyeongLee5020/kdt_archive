				## 반복문 (while문)

for문이 정해진 횟수만큼 반복한다변 while문은조건식이 true일 경우에 계속해서 반복한다. 조건
식에는 비교 또는 논리 연산식이 주로 오는데 조건식이 false가 되면 반복 행위를 멈추고 while문
을종료한다. 다음은 while문을 작성하는 형식과 실행 흐름을 보여준다.



public class WhileExample01 {
	public static void main(String[] args) {
		// while문
		
		System.out.println("프로그램 시작");
		
		int i = 1;
		
		while(i <= 10) {
			System.out.println(i + "번째 반복합니다.");
			i++;
		}
		
		System.out.println("프로그램 종료");
		
	}
}







public class WhileExample02 {
	public static void main(String[] args) {
		// 1부터 50까지 범위의 홀수를 출력
		// 1부터 50까지 범위의 짝수를 출력
		
		int number = 1;
		int sum1 = 0;
		int sum2 = 0;
		
		while(number <= 30) {
			if(number % 2 == 0) {
				System.out.println(number + " = 짝수");
				sum1 += number;
			} else {
				System.out.println("         " + number + " = 홀수");
				sum2 += number;
			}
			number++;
		}
		System.out.println("짝수의 총 합 : " + sum1);
		System.out.println("홀수의 총 합 : " + sum2);
	}
}




public class WhileExample03 {

	public static void main(String[] args) {
		
		// 1부터 10까지의 범위를 출력 (숫자 출력시 가로로 출력)
		// 각 숫자를 구분하기위해서 ","를 사용해야 한다. 
		// 단 마지막 숫자에는 ","가 출력되지 않아야 한다.
		
		int num = 1;
		
		while(num <= 10) {
			System.out.print(num);
			
			if(num != 10) {
				System.out.print(", ");
			}
			
			num++;
		}
	}
}




public class WhileExample2 {
	public static void main(String[] args) {
		
		int i = 2;
		int k = 1;
		int sum = 0;
		
		while(i <= 9) {
			System.out.println("==== " + i + "단 ====");
			while(k <= 9) {
				System.out.println(i + " x " + k + " = " + (i*k));
				k++;
			}
			k =1;
			i++;
		}
	}
}




public class WhileExample04 {

	public static void main(String[] args) {
		// while도 중복 while문이 가능하다.
		// while문을 사용하여 구구단을 출력
		
		int outterNum = 2;	// 초기식
		int innerNum = 1;	// 초기식
		
		while(outterNum <= 9) {	// 조건식
			System.out.println("#### " + outterNum + "단 ####");
			while(innerNum <= 9) {	// 조건식
				System.out.println(outterNum + " * " + innerNum + " = " + (outterNum * innerNum));
				innerNum++;	// 내부 while문 증감식
			}
			innerNum = 1;	// 내부 while의 변수 초기화 (변수가 while문 외부에 있기때문에 초기화 해야 한다.)
			outterNum++;	// 외부 while문 증감식
			System.out.println();
		}
	}
}




====================================================================================================


				## do-while문

-do-while문은 조건식에 의해 반복 실행한다는 점에서는 while문과 동일하다. 

-while문은 시작할 때부터 조건식을 검사하여 블록 내부를 실행할지 결정하지만,
 경우에 따라서는 블록 내부의 실행문을 우선 실행시키고 실행 결과에 따라서 
 반복 실행을 계속할지 결정하는 경우도 발생한다. 
 이때do-while문을 사용할 수 있다. 


public class WhileExample05 {

	public static void main(String[] args) {
		// do-while문 
		
		int i = 8;
		
		while(i <= 5) {
			System.out.println(i);
			i++;
		}
		


		System.out.println("----------------------------------");
		


		int j = 8;
		do {
			System.out.println(j);
			j++;
		} while(j <= 5);
	}
}















































