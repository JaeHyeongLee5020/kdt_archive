				## 프로그래밍 언어란

사람과 사람이 대화를 할 때는 서로 공통으로 알고 있는 언어를 사용해야만 의사소통이 가능하다.
사람이 컴퓨터에게 명령을 내릴 때도 언어가 필요하다. 
그리고 그 언어는 사람과 컴퓨터가 공통적으로 알고있는 것이리야 한다.
하지만 컴퓨터가 이해할 수 있는 언어는 우리가 일상생활에서 사용하는 언어와는 너무나도 
다른 기계어 (machine language)이다. 
기계어는 0과 1로 이루어진 이진 코드이기 때문에 사람이 이해하기에는 매우 어렵다 
반면 사람이 사용히는 언어는 컴퓨터 입장에서 보면 이해할 수 없는 문자 집합이다. 
그렇기 때문에 사람과 컴퓨터가 대화하기 위해서는 
사람의 언어와 기계어의 다리 역할을 하는 프로그래밍 언어가 필요하다.

프로그래밍 언어는 고급 언어와 저급 언어로 구분된다. 
고급 언어란 컴퓨터와 대화할 수 있도록 만든 언어 중에서 사람이 쉽게 이해할 수 있는 언어를 말한다. 
고급 언어로 작성된 소스는 컴퓨터가 바로 이해할 수 없기 때문에 컴파일 (compile) 과정을 통해서 
컴퓨터가 이해할 수 있는 0과 1로 이루어진 기계어로 변환한 후 컴퓨터가 사용하게 된다. 
반대로 저급 언어란 기계어에 가까운 언어를 말하는데， 대표적으로 어셈블리어가 저급 언어에 속한다.   
저급 언어는 사람이 쉽게 이해할 수 없기 때문에 배우기가 매우 까다롭다.

일반적으로 프로그래밍 언어라고 하면 고급 언어를 말하는， 
대표적인 프로그래밍 언어인 C , C++ , C# , 자바(Java)는 모두 고급 언어에 속한다. 
이 언어들로 작성된 내용을 소스(source) 라고 부르고, 이 소스는 컴파일러(compiler)라는 소프트웨어에 의해 
기계어로 변환된 후 컴퓨터에서 실행할 수 있게 된다. 
우리가 흔히 말하는 프로그램(program) 이란 컴퓨터에서 특정 목적을 수행하 기 위해 
프로그래밍 언어로 작성된 소스를 기계어로 번역한 것을 말한다.

                    





=====================================================================================

			## JAVA란?

		# 자바 소개

1995년도에 처음 썬 마이크로시스템즈(Sun Microsystems) 에서 자바(Java) 언어를 발표한 후，
지금까지 자바는 성공한 프로그래밍 언어로서 전세계적으로 다양한 분야에서 사용되고 있다. 
자바는 1991년에 씬의 엔지니어틀에 의해서 고안된 오크(Oak) 라는 언어에서부터 시작되었다. 
오크는 그래밍 언어로 시용되었고， 이름도 자바로 변경되었다.처음에는 가전제품에서 시용될 목적이었다. 
그 후 인터넷의 등장과 함께 인터넷에서 실행되는 프로그래밍 언어로 시용되었고，이름도 자바로 변경되었다.

자바 언어를 발표한 1995년부터 1999년까지는 윈도우(Windows) 프로그램 개발이 주류였기 때문에 
C++ 언어에 비해 자바는이주 열세였다. 
메모리 및 CPU를 지나치게 많이 사용하기 때문에 윈도우프로그래밍 언어로는 부적합하다는 문제점이 있었다.    
하지만 1999년도부터 인터넷이 활성화되면서 웹 애플리케이션 구축용 언어로 자바가 급부장했다. 
그 이유는 기업체 및 공공기관의 다양한 서버 운영체제에서 단 한번의 작성으로 
모든 곳에서 실행 기능한 언어는 자바뿐이었기 때문이다.

초기의 자바는 가전 제품에 탑재할 프로그래밍 언어로 개발되었지만 지금은 스마트폰을 비롯해서
각종 장비와 데스크톱에서 실행되는 애플리케이션 그리고 금융 공공 대기업 등의 
엔터프라이즈기업 환경에서 실행되는 서벼 애플리케이션을 개발하는중추적인 언어로 자리매김하고 있다.




			## 자바의 특징

	# 이식성이 높다.

이식성이란 서로 다른 실행 환경을 가진 시스템 간에 프로그램을 옮겨 실행할 수 있는 것을 말한다.
예를 들어 윈도우(Microsoft Windows)에서 실행하는 프로그램을 리눅스 
또는 유닉스에서 실행할 수 있다면 이식성이 높은 것이고 실행할 수 없다면 이식성이 낮다고 볼 수 있다. 
윈도우에서 실행되는 대부분의 프로그램들은 윈도우 환경에 최적화되어 있기 때문에 
유닉스나 리눅스에서 실행하려면 프로그램 소스 파일을 수정한 후 재컴파일 과정을 거쳐야 한다.   
하지만 자바 언어로 개발된 프로그램은 소스 파일을 다시 수정하지 않아도， 
자바 실행 환경 (JRE: Java Runtime Environment)이 설치되어 있는 모든 운영체제에서 실행 가능하다. 
따라서 자바 언어는 이식성이 높은 프로그래밍 언어라고 볼 수 있다.
                                  



	# 객체지향 언어이다.

프로그램을 개발하는 기법으로 부품에 해당하는 객체들을 먼저 만들고， 
이것들을 하나씩 조립 및 연결해서 전체 프로그램을 완성하는 기법을 
객체 지향 프로그래밍 (oop: Object Oriented Programming)이라고 한다. 
이때 사용되는 언어를 객체지향 언어라고 한다.
             
자바는 100% 객체 지향 언어이다.  객체를 만들기 위해 설계도인 클래스를 작성해야 하고，
객체와 객체를 연결하여 목적에 맞는 프로그램을 만들어 낸다 
자바는 아무리 작은 프로그램이라도 객체를 만들어 사용한다. 
처음부터 객체를 고려하여 설계되었기 때문에 객체 지향 언어가 가져야 할 
캡슐, 상속, 다형성 기능을 완벽하게 지원하고 있다.





	# 함수적 스타일 코딩을 지원한다.

자바는 객체 지향 프로그래밍이 소프트웨어 개발의 주요 패러다임이었던 1990년대에 디자인되었다. 
객체 지향프로그래밍이 나오기 오래전부터 Lisp 또는 Scheme와 같은함수적 프로그래밍 언어들이 있었는데 
학계를 제외하고는 현업에서 큰 호응을 얻지 못했다 
최근 들어 함수적 프로그래밍이 다시 부각되고 있는데 대용량 데이터의 병렬처리 
그리고 이벤트 지향 프로그래밍을 위해 적합했기 때문이다. 
자바는 함수적 프로그래밍을 위해 람다식 (Lambad Expression)을 자바 8버전부터 지원한다. 
람다식을 사용하면 컬렉션의 요소를 필터링, 매핑, 집계 처리하는데 쉬워지고, 코드가 매우 간결해진다.





	# 메모리를 자동으로 관리한다

C++은 메모리에 생성된 객체를 제거하기 위해 개발자가 직접 코드를 작성해야 한다. 
만약 이 작업을 성실하게 해주지 않으면 프로그램은 불완전해지고 갑자기 다운되는 현상을 겪게 된다. 
자바는 개발자가 직접 메모리에 접근할 수 없도록 설계되었으며 메모리는 자바가 직접 관리한다.    
객체 생성 시 자동적으로 메모리 영역을 찾아서 할당하고, 사용이 완료되면 
쓰레기 수집기(Garbage Collector)를 실행시켜 자동적으로 사용하지 않는 객제를 제거시켜준다. 
따라서 개발자는 메모리 관리의 수고스러움을 덜고, 핵심 기능 코드 작성에 집중할 수 있다.





	# 다양한 어플리케이션을 개발할 수 있다

자바는 윈도우, 리녹스, 유닉스, 맥 등 다양한 운영체제 (OS: Operating System)에서 실행되는프로그램을 개발할 수 있다.  
단순한 콘솔 프로그램에서부터 클라이언트용 윈도우 애플리케이션, 서버용 웹 애플리케이션 
그리고 모바일용 안드로이드 엠에 이르기까지 거의 모든 곳에서 실행되는 프로그램을 개발할 수 있다. 
자바는 다양한 운영체제에서 사용할 수 있는 개발 도구와 API를 묶어 에디션(Eclition) 형태로 정의하고 있다.





	# 멀티 스레드(Multi-Thread)를 쉽게 구현 할 수 있다.

하나의 프로그램이 동시에 여러 가지 작업을 처리해야 할 경우와 대용량 작업을 빨리 처리하기 위해 
서브 작업으로 분리해서 병렬 처리하려면 멀티 스레드프로그래밍이 필요하다. 
프로그램이 실행되는 운영체제에 따라서 멀티 스레드를 구현하는 방법이 다르지만 
자바는 스레드 생성 및 제어와 관련된 라이브러리 API를 제공하고 있기 때문에 
실행되는 운영체제에 상관없이 멀티 스레드를 쉽게 구현할 수 있다.




	# 동정 로딩(Dynamic Loading)을 지원한다.

자바 애플리케이션은 여러 개의 객체가 서로 연결되어 실행되는데 이 객체들은 클래스로부터 생성된다. 
애플리케이션이 실행될 때 모든 객체가 생성되지 않고 객체가 필요한 시점에 클래스를 통적로딩해서 객체를 생성한다. 
또한 개발 완료 후 유지보수(수정)가 발생하더라도 해당 클래스만 수정하면 되므로 
전체 애플리케이션을 다시 컴파일할 필요가 없다.   
따라서 유지보수를 쉽고 빠르게 진행할 수 있다.




	# 막강한 오픈소스 라이브러리가 풍부하다.
자바는 오픈소스(Open Source) 언어이기 때문에 자바 프로그램에서 사용하는 라이브러리 또한 오픈소스가 넘쳐난다.   
고급 기능을 구현하는 코드를 직접 작성할 경우, 시간과 노력이 필요하고, 실행 안전성을 보장할수 없지만 
검증된 오픈소스 라이브러리를 사용하면 개발기간을 단축하면서 안전성이 높은 애플리케이션을 쉽게 개발할 수 있다. 
많은 회사들이 자바를 선택하는 이유 중의 하나가 막강하고 풍부한 오픈소스 라이브러리가 있기 때문이다.




	# 자바 개발환경 구축
-JDK (Jva Development Kit) = JRE + 개발도구
-JRE (Java Runtime Environment) = JVM＋표준 클래스 라이브러리
-표준 라이브 러리는 ORACLE 사이트에서 제공하며 오픈 PAI는 비 표준 라이브러리이다.





=====================================================================================

				## 자바 가상 머신(JVM)

운영체제는 자바 프로그램을 바로 실행할 수 없는데 그 이유는 자바 프로그램은 완전한 기계어가 아닌, 
중간 단계의 바이트 코드이기 때문에 이것을 해석하고 실행할 수 있는 가상의 운영체제가 필요하다. 
이것이 자바 가상 머신(JVM: ]ava Virtual Machine)이다
JVM은 실제 운영체제를 대신해서 자바 프로그램을 실행하는 가상의 운영체제 역할을 한다. 
영어권에서는 컴퓨터를 흔히 기계(Machine)라고 부르기 때문에 자바를 실행시키는 
가상의 기계’라고 해서 'JVM'이라는 용어가 나오게 된 것이다. 
운영체제별로 프로그램을 실행하고 관리하는 방법이 다르기 때문에 
운영체제별로 자바 프로그램을 별도로 개발하는 것보다는 운영체제와 자바 프로그램을 중계히는 JVM을 두어 
자바 프로그램이 여러 운영체제에서 동일한 실행 결과가 나오도록 설계한 것이다.   
따라서 개발자는 운영체제와 상관없이 자바 프로그램을 개발할 수 있다.

바이트 코드는 모든 JVM에서 통일한 실행 결과를 보장하지만, JVM은 운영체제에 종속적이다. 
자바 프로그램을 운영체제가 이해하는 기계어로 번역해서 실행해야 하므로 JVM은 운영체제에 맞게 설치되어야 한다.
JVM은 JDK 또는 JRE를 설치하면 wk동으로 설치되는데, JDK와 JRE가 운영체제별로 제공된다. 
이해를 돕기 위해 운영체제와 JVM 그리고 자바 프로그램의 실행 단계를 그림으로 표현하면 다음과 같다.
                         
자바 프로그램은 확장자가 .java 인 파일을 작성히는 것부터 시작된다.  이것을 소스 파일이라고 하는데,
이 소스 파일을 컴파일러로(javac.exe)로 컴파일하면 확장자가 .class인 바이트 코드 파일이
데，   이 소스 파일을 컴파일러로(javac.exe) 로 검파일하면 확장자가 .class 인 바이트 코드 파일이 생성된다.
바이트 코드 파일은 JVM 구동 명령어(java.exe)에 의해 JVM에서 해석되고 해당 운영체제에 맞게 기계어로 번역된다.    
바이트 코드는 하나지만, JVM에 의해서 번역되는 기계어는 운영체제에 따라서 달라진다.



























