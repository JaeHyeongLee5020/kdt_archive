					### 파일 입출력


				## File 클래스
 
-IO 패키지(java.io)에서 제공하는 File 클래스는 파일 크기, 파일 속성, 파일 이름 등의 
 정보를 얻어내는 기능과 파일 생성 및 삭제 기능을 제공하고 있다. 
 그리고 디렉터리를 생성하고 디렉터리에 존재하는 파일 리스트를 얻어내는 기능도 있다.
 그러나 파일의 데이터를 읽고 쓰는 기능은 지원하지 않는다. 
-파일의 입출력은 스트림을 사용해야 한다. 다음은 C:\Temp 디렉터리의 file.txt 파일을 File 객체로 생성하는 코드이다.

	File file = new File("C:\\Temp\\file.txt"); 
	File file = new File("C:/Temp/file.txt");


-디렉터리 구분자는 운영체제마다 조금씩 다르다. 
-윈도우에서는 \ 또는 /를 사용할 수 있고, 유닉스나 리눅스에서는 / 를 사용한다. 
-만약 \를 디렉터리 구분자로 사용한다면 이스케이프 문자(\\)로 기술해야 한다.
-File 객체를 생성했다고 해서 파일이나 디렉터리가 생성되는 것은 아니다. 
-생성자 매개값으로 주어진 경로가 유효하지 않더라도 컴파일 에러나 예외가 발생하지 않는다. 
-File 객체를 통해 해당 경로에 실제로 파일이나 디렉터리가 있는지 확인하려면 exists() 메소드를 호출할 수 있다. 
-디렉터리 또는 파일이 파일 시스템에 존재한다면 true를 리턴하고 존재하지 않는다면 false를 리턴한다.

	boolean isExist = file.exists();

	d:/tmp/temp/dir/newDir


	d:/tmp

-exists() 메소드의 리턴값이 false라면 createNewFile(), mkdir(), mkdirs() 메소드로 파일 또는 디렉터리를 생성할 수 있다.
========================================================================================
   리턴타입	|	       메소드		|		설명				|
========================================================================================
  boolean	|  createNewFile()			|  새로운 파일을 생성					|
---------------------------------------------------------------------------------------
  boolean	|  mkdir()				|  새로운 디렉터리를 생성				|
---------------------------------------------------------------------------------------
  boolean	|  mkdirs()			|  경로상에 없는 모든 디렉터리를 생성			|
---------------------------------------------------------------------------------------
  boolean	|  delete()			|  파일 또는 디렉터리를 삭제				|
========================================================================================


	d:/tmp/temp/test.txt

파일 또는 디렉터리가 존재할 경우 다음 메소드를 통해 정보를 얻어낼 수 있다.

===============================================================================================
   리턴타입		|	       메소드		|		설명				|
===============================================================================================
  boolean		|  canExecute()			|  실행할 수 있는 파일인지 여부				|
-----------------------------------------------------------------------------------------------
  boolean		|  canRead()			|  읽을 수 있는 파일인지 여부				|
-----------------------------------------------------------------------------------------------
  boolean		|  canWrite()			|  실행 및 저장할 수 있는 파일인지 여부			|
-----------------------------------------------------------------------------------------------
  String		|  getName()			|  파일의 이름을 리턴					|
-----------------------------------------------------------------------------------------------
  String		|  getParent()			|  부모 디렉터리를 리턴				|
-----------------------------------------------------------------------------------------------
  File		|  getParentFile()			|  부모 디렉터리를 File 객체로 생성 후 리턴			|
-----------------------------------------------------------------------------------------------
  String		|  getPath()			|  전체 경로를 리턴					|
-----------------------------------------------------------------------------------------------
  boolean		|  isDirectory() 			|  디렉터리인지 여부					|
-----------------------------------------------------------------------------------------------
  boolean		|  isFile()				|  파일인지 여부					|
-----------------------------------------------------------------------------------------------
  boolean		|  isHidden()			|  숨김 파일인지 여부					|
-----------------------------------------------------------------------------------------------
  long		|  lastModified()			|  마지막 수정 날짜 및 시간을 리턴			|
-----------------------------------------------------------------------------------------------
  long		|  length()			|  파일의 크기를 리턴 (단위 : byte)			|
-----------------------------------------------------------------------------------------------
  String[]		|  list()				|  디렉터리에 포함된 파일 및 서브 디렉터리			|
		|				|  목록 전부를 String 배열로 리턴			|
-----------------------------------------------------------------------------------------------
  String[]		|  list(FilenameFilter filter)		|  디렉터리에 포함된 파일 및 서브 디렉터리 목록 중		|
		|  				|  FilenameFilter에 맞는 것만 String 배열로 리턴		|
-----------------------------------------------------------------------------------------------
  File[]		|  listFiles()			|  디렉터리에 포함된 파일 및 서브 디렉터리 			|
		|				|  목록 전부를 File 배열로 리턴				|
-----------------------------------------------------------------------------------------------
  File[]		|  listFiles(FilenameFilter filter)	|  디렉터리에 포함된 파일 및 서브 디렉터리 목록 중에		|
		|  				|  FilenameFilter에 맞는 것만 File 배열로 리턴		|
===============================================================================================



import java.io.File;
public class FileExample01 {
	public static void main(String[] args) {
		
		File file = new File("d:/tmp/temp/java.txt");
		
		if(file.exists()) {
			if(file.isDirectory()) {
				System.out.println("객체의 경로상에 있는것은 디렉터리 입니다.");
			} else {
				System.out.println("객체의 경로상에 있는것은 파일 입니다.");
			}
		} else {
			System.out.println("경로상에 파일이 없습니다.");
		}
		
		
	}
}

경로상에 파일이 없습니다.




import java.io.File;
public class FileExample02 {
	public static void main(String[] args) {
		
		File dir = new File("d:/tmp/temp/mkDir/dir");
		
		boolean dirResult = dir.exists();
		System.out.println("dirResult : " + dirResult);
		
//		boolean mkdirResult = dir.mkdir();
//		System.out.println("mkdirResult : " + mkdirResult);
		
//		boolean mkdirsResult = dir.mkdirs();
//		System.out.println("mkdirsResult : " + mkdirsResult);
		
		if(dir.exists() == false) {
			dir.mkdirs();
			System.out.println("디렉터리가 생성되었습니다.");
		}
	}
}


dirResult : true






package test.chapter17.example03;

import java.io.File;
import java.io.IOException;

public class FileExample03 {
	public static void main(String[] args) throws Exception {
		
		File dir = new File("d:/tmp/temp");
		File file1 = new File("d:/tmp/temp/input1.txt");
		File file2 = new File("d:/tmp/temp/input2.txt");
		
//		boolean file1Result = file1.exists();
//		System.out.println("file1Result : " + file1Result);
		
		// getName() : 파일의 이름을 리턴
//		String fileName = file1.getName();
//		System.out.println("파일명 : " + fileName);
		
		// getParent() : 해당 파일의 부모 디렉터리를 리턴
//		String filePath = file1.getParent();
//		System.out.println("파일 경로 : " + filePath);
		
		if(file1.exists()) {
			if(file1.isFile()) {
				System.out.println("경로상에 있는것은 파일 입니다.");
				String fileName = file1.getName();
				System.out.println("파일명 : " + fileName);
				String filePath = file1.getParent();
				System.out.println("파일 경로 : " + filePath);
				long file1Size = file1.length();
				System.out.println("파일 크기 : " + file1Size + "(byte)");
			} else {
				System.out.println("경로상에 있는것은 디렉터리 입니다.");
				String directoryName = file1.getName();
				System.out.println("디렉터리명 : " + directoryName);
				String directoryPath = file1.getParent();
				System.out.println("디렉터리 경로 : " + directoryPath);
				long directorySize = file1.length();
				System.out.println("디렉터리 크기 : " + directorySize + "(byte)");
			}
		} else {
			System.out.println("경로상에 파일 또는 디렉터리가 없습니다.");
		}
		System.out.println();
		
		if(dir.exists()) {
			if(dir.isFile()) {
				System.out.println("경로상에 있는것은 파일 입니다.");
				String fileName = dir.getName();
				System.out.println("파일명 : " + fileName);
				String filePath = dir.getParent();
				System.out.println("파일 경로 : " + filePath);
				long file1Size = file1.length();
				System.out.println("파일 크기 : " + file1Size + "(byte)");
			} else {
				System.out.println("경로상에 있는것은 디렉터리 입니다.");
				String directoryName = dir.getName();
				System.out.println("디렉터리명 : " + directoryName);
				String directoryPath = dir.getParent();
				System.out.println("디렉터리 경로 : " + directoryPath);
				long directorySize = file1.length();
				System.out.println("디렉터리 크기 : " + directorySize + "(byte)");
			}
		} else {
			System.out.println("경로상에 파일 또는 디렉터리가 없습니다.");
		}
		System.out.println();
		
		if(file2.exists() == false) {
			boolean file2Result = file2.createNewFile();
			System.out.println("파일 생성 : " + file2Result);
			String fileName = file2.getName();
			System.out.println("파일명 : " + fileName);
			String filePath = file2.getParent();
			System.out.println("파일 경로 : " + filePath);
			long file2Size = file2.length();
			System.out.println("파일 크기 : " + file2Size + "(byte)");
		}
	}
}



경로상에 있는것은 파일 입니다.
파일명 : input1.txt
파일 경로 : d:\tmp\temp
파일 크기 : 34837(byte)

경로상에 있는것은 디렉터리 입니다.
디렉터리명 : temp
디렉터리 경로 : d:\tmp
디렉터리 크기 : 34837(byte)

파일 생성 : true
파일명 : input2.txt
파일 경로 : d:\tmp\temp
파일 크기 : 0(byte)




package test.chapter17.example03;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
public class FileExample04 {
	public static void main(String[] args) throws Exception {
		
		File dir = new File("d:/tmp/temp/mkDir");
		File file1 = new File("d:/tmp/temp/file1.txt");
		File file2 = new File("d:/tmp/temp/file2.txt");
		File file3 = new File("d:/tmp/temp/file3.txt");
		
		if(dir.exists() == false) {
			dir.mkdirs();
		}
		
		if(file1.exists() == false) {
			file1.createNewFile();
		}
		
		if(file2.exists() == false) {
			file2.createNewFile();
		}
		
		if(file3.exists() == false) {
			file3.createNewFile();
		}
		
		File temp = new File("d:/tmp/temp");
		
		// d:/tmp 경로의 temp 디렉터리의 모든 파일 및 디렉터리를 파일 객체로 생성해서 File 배열로 리턴한다.
		File[] content = temp.listFiles();
		System.out.println("\t날짜\t 시간\t\t 형태\t 크기\t 파일명");
		System.out.println("=========================================================================");

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd a hh:mm:ss");
		
		for(File file : content) {
			System.out.print(sdf.format(new Date(file.lastModified())));
			if(file.isDirectory()) {
				System.out.print("\t\t<DIR> \t" + file.length() + "\t" + file.getName());
			} else {
				System.out.print("\t\t\t" + file.length() + "\t" + file.getName());
			}
			System.out.println();
		}
		System.out.println("=========================================================================");
	}
}



	날짜	 시간		 형태	 크기	 파일명
=========================================================================
2025/01/20 오전 10:09:52			24674	2) 변수.txt
2025/01/17 오후 05:12:23			4595	3) 형변환 (타입 변환).txt
2025/03/05 오후 02:39:46			0	file1.txt
2025/03/05 오후 02:39:46			0	file2.txt
2025/03/05 오후 02:39:46			0	file3.txt
2025/03/05 오후 02:39:46		<DIR> 	0	mkDir
2025/03/05 오후 02:39:46		<DIR> 	0	mkDirs
2025/01/08 오전 11:08:57			1461	Visual Studio Code.lnk
=========================================================================


















======================================================================================================

				## FileInputStream

-FileInputStream 클래스는 파일로부터 바이트 단위로 읽어들일 때 사용하는 바이트 기반 입력 스트림이다.
-바이트 단위로 읽기 때문에 그림, 오디오, 비디오, 텍스트 파일 등 모든 종류의 파일을 읽을 수 있다. 
-다음은 FilelnputStream을 생성하는 두 가지 방법을 보여준다.

	// 첫 번째 방법
	FilelnputStream fis = new FilelnputStream("C:/Temp/image.gif");

	// 두 번째 방법
	File file = new File("C:/Temp/image.gif");
	FilelnputStream fis = new FilelnputStream(file);


첫 번째 방법은 문자열로된 파일의 경로를 가지고 FilelnputStream을 생성한다. 
만약 읽어야 할파일이 File 객체로 이미 생성되어 있다면 두 번째 방법으로 좀 더 쉽게 FilelnputStream을 생성 할 수 있다. 
FilelnputStream 객체가 생성될 때 파일과 직접 연결이 되는데, 만약 파일이 존재하지 않으면 
FileNotFoundException을 발생시키므로 try-catch문으로 예외 처리를 해야 한다.
FilelnputStream은 InputStream의 하위 클래스이기 때문에 사용 방법이 InputStream과 동일하다. 
한 바이트를 읽기 위해서 read() 메소드를 사용하거나, 읽은 바이트를 byte 배열에 저장하기위해서 
read(byte[] b) 또는 read(byte[] b, int off, int len) 메소드를 사용한다. 
전체 파일의 내용을 읽기 위해서는 이 메소드들을 반복 실행해서 -1 이 나올 때까지 읽으면 된다. 
파일의 내용을 모두 읽은 후에는 close() 메소드를 호출해서 파일을 닫아준다.




import java.io.FileInputStream;
public class FileInputStreamExample01 {
	public static void main(String[] args) {
		
		try {
			FileInputStream fis = new FileInputStream					("D:/test/test/src/test/chapter17/example01/InputStreamReadExample02.java");
			
			int readNum;
			
			while((readNum = fis.read()) != -1) {
				char ch = (char)readNum;
				System.out.print(ch);
			}
			
			fis.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}





======================================================================================================

				## FileOutputStream

-FileOutputStream은 바이트 단위로 데이터를 파일에 저장할 때 사용하는 바이트 기반 출력 스트림이다. 
-바이트 단위로 저장하기 때문에 그림, 오디오, 비디오, 텍스트 등 모든 종류의 데이터를 파일로 저장할 수 있다. 
-다음은 FileOutputStream을 생성하는 두 가지 방법을 보여준다. 
-첫 번째 방법은 파일의 경로를 가지고 Fil eOutputStream을 생성하지만, 
 저장할 파일이 File 객체로 이미 생성되어 있다면 두 번째 방법으로 좀 더 쉽게 FileOutplltStream을 생성할 수 있다.

	// 첫 번째 방법
	FileOutputStream fis = new FileOutputStream("C:/Temp/image.gif");

	// 두 번째 방법
	File file = new File("C:/Temp/image.gif");
	FileOutputStream fis = new FileOutputStream(file);


-주의할 점은 파일이 이미 존재할 경우, 데이터를 출력하면 파일을 덮어쓰게 되므로, 기존의 파일 내용은 사라지게 된다. 
-기존의 파일 내용 끝에 데이터를 추가할 경우에는 FileOutputStream 생성의 두 번째 매개값을 true로 주변 된다.

	FileOutputStream fis = new FileOutputStream("C:/Temp/data.txt",  true); 
	FileOutputStream fis = new FileOutputStream(file, true);


-FileOutStream은 FileOutStream의 하위 클래스이기 때문에 사용 방법이 OutputStream과 동일하다. 
-한 바이트를 저장하기 위해서 write() 메소드를 사용하고 바이트 배열을 한꺼번에 저장 하기 위해서 
 write (byte[] b) 또는 write(byte[] b, int off, int len) 메소드를 사용한다.

	FileOutputStream fos = new FileOutputStream("C:/Temp/image.gif");
	byte[] data = ...
	fos.write(data);
	fos.flush();
	fos.close();


write() 메소드를 호출한 이후에 flush() 메소드로 출력 버퍼에 잔류하는 데이터를 완전히 출력하도록 하고, 
close() 메소드를 호출해서 파일을 닫아준다. 
다음은 원본 파일을 타켓 파일로 복사하는 예제이다. 
복사 프로그램의 원리는 원본 파일에서 읽은 바이트를 바로 타겟 파일로 저장하는 것이기 때문에 
FileInputStream에서 읽은 바이트를 바로 FileOutputStream으로 저장하면 된다.


import java.io.FileInputStream;
import java.io.FileOutputStream;
public class FileOutputStreamExample01 {
	public static void main(String[] args) throws Exception {
		
		String originalFileName = "D:/test/test/src/test/chapter17/example04/cat.jpg";
		String targetFileName = "D:/tmp/temp/mkDir/babyCat.jpg";
		
		FileInputStream fis = new FileInputStream(originalFileName);	// 파일을 읽기위한 객체
		FileOutputStream fos = new FileOutputStream(targetFileName);	// 파일을 전송하기위한 객체
		
		int readNum;
		
		byte[] bytes = new byte[1024];	// 1Kbyte
		
		while((readNum = fis.read(bytes)) != -1) {	// read() 메서드로 읽은 데이터를
			fos.write(bytes, 0, readNum);			// write() 메서드를 사용하여 전송
		}
		fis.close();
		fos.flush();
		fos.close();
	}
}




import java.io.FileInputStream;
import java.io.FileOutputStream;
public class FileOutputStreamExample02 {
	public static void main(String[] args) throws Exception {
		
		String originalFileName = "D:/tmp/temp/mkDir/babyCat.jpg";
		String targetFileName = "D:/test/test/src/test/chapter17/example04/cat.jpg";
		
		FileInputStream fis = new FileInputStream(originalFileName);
		FileOutputStream fos = new FileOutputStream(targetFileName);
		
		int readByteNo;
		byte[] bytes = new byte[1024];
		
		while((readByteNo = fis.read(bytes)) != -1) {
			fos.write(bytes, 0, readByteNo);
		}
		fos.flush();
		fis.close();
		fos.close();
	}
}



======================================================================================================

				## FileReader

-FileReader 클래스는 텍스트 파일을 프로그램으로 읽어들일 때 사용하는 문자 기반 스트림이다. 
-문자 단위로 읽기 때문에 텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 읽을 수 없다. 
-다음은 FileReader를 생성하는 두 가지 방법을 보여준다. 
-첫 번째 방법은 전체 파일의 경로를 가지고 FileReader를 생성하지만, 
 읽어야 할 파일이 File 객체로 이미 생성되어 있다면 두 번째 방법으로 좀 더 쉽게 FileReader를 생성할 수 있다.


	// 첫 번째 방법
	FileReader fr = new FileReader("C:/Temp/file.txt");

	// 두 번째 방법
	File file = new File("C:/Temp/file.txt");
	FileReader fr = new FileReader(file);


-FileReader 객체가 생성될 때 파일과 직접 연결이 되는데, 
 만약 파일이 존재하지 않으면 FileNotFoundException을 발생시키므로 try-catch문으로 예외 처리를 해야 한다. 

-FileReader는 Reader의 하위 클래스이기 때문에 사용 방법이 Reader와 동일하다. 
 한 문자를 읽기 위해서 read() 메소드를 사용하거나, 읽은 문자를 char 배열에 저장하기 위해서 
 read (char[] cbuf) 또는 read (char[] cbuf, int off, int len) 메소드를 사용한다. 
-전체 파일의 내용을 읽기 위해서는 이 메소드들을 반복 실행해서 -1 이 나올 때까지 읽으면 된다.

	FileReader fr = new FileReader("C:/Temp/file.txt");
	int readCharNo;
	char[] cbuf = new char[100];
	while( (readCharNo = fr.read(cbuf) ) != -1) {	// 읽은 문자 배열(cbuf)를 처리
	fr.close();


파일의 내용을 모두 읽은 후에는 close() 메소드를 호출해서 파일을 닫아준다.   
다음은 FileReaderExample.java 소스 파일을 읽고 콘솔에 출력하는 예제이다




import java.io.File;
import java.io.FileReader;

public class FileReaderExample01 {
	public static void main(String[] args) throws Exception {
		
		File file = new File("D:/tmp/temp/file.txt");
		FileReader fr = new FileReader(file);
		
		int readNum;
		
		char[] chArr = new char[1024];
		
		String str = "";
		if(file.isFile() && file != null) {	// 파일이어야 하고 null이 아니면 while문이 실행
			while((readNum = fr.read(chArr)) != -1) {
//				str += String.valueOf(chArr);
				
				System.out.println(String.valueOf(chArr));
			}
		}
		fr.close();
		System.out.println("파일 읽기 완료");
	}
}















======================================================================================================


				## FileWriter

FileWriter는 텍스트 데이터를 파일에 저장할 때 사용하는 문자 기반 스트림이다. 
문자 단위로 저장하기 때문에 텍스트가 아닌 그림, 오디오, 비디오 등의 데이터를 파일로 저장할 수 없다. 
다음은 FileWriter를 생성하는 두 가지 방법을 보여준다. 

첫 번째 방법은 전체 파일의 경로를 가지고 FileWriter을 생성하지만 
저장할 파일이 File 객체로 이미 생성되어 있다면 두 번째 방법으로 좀더 쉽게 FileWriter를 생성할 수 있다.

	// 첫 번째 방법
	FileWriter fw = new FileWriter("C:/Temp/file.txt");

	// 두 번째 방법
	File file = new File("C:/Temp/file.txt");
	FileWriter fw = new FileWriter(file);


위와 같이 FileWriter를 생성하면 지정된 파일이 이미 존재할 경우 그 파일을 덮어쓰게 되므로, 
기존의 파일 내용은 사라지게 된다. 
기존의 파일 내용 끝에 데이터를 추가할 경우에는 File Writer 생성자에 두 번째 매개값으로 true를 주면 된다.

	FileWriter fw = new FileWriter("C:/Temp/file.txt", true);
	FileWriter fw = new FileWriter(file, true);


FileWriter는 Writer의 하위 클래스이기 때문에 사용 방법이 Writer와 동일하다. 
한 문지를 저장하기 위해서 write() 메소드를 사용하고 문자열을 저장하기 위해서 write(String str) 메소드를 사용한다.

	FileWriter fw = new FileWriter("C:/Temp/file.txt");
	String data = "저장할 문자열";
	fw.write(data); 
	fw.flush();
	fw.close();


write() 메소드를 호출한 이후에 f1ush() 메소드로 출력 버퍼에 있는 데이터를 파일로 완전히 출 력하도록 하고, 
close() 메소드를 호출해서 파일을 닫아준다. 
다음 예제는 문자열 데이터를 c:\Temp\file.txt 파일에 저장한다.



import java.io.FileReader;
import java.io.FileWriter;
public class FileWriterExample02 {
	public static void main(String[] args) throws Exception {
		
		String originalFileName = "D:/test/test/src/test/chapter17/example04/file.txt";
		String targetFileName = "D:/tmp/temp/fileWriterText.txt";
		
		FileReader fr = new FileReader(originalFileName);
		FileWriter fw = new FileWriter(targetFileName);
		
		int readNo;
		char[] chArr = new char[1024];
		
		while((readNo = fr.read(chArr)) != -1) {
			fw.write(chArr);
		}
		fw.flush();
		fw.close();
		fr.close();
	}
}



























