				## 이항연산자 

-이항 연산자는 피연산자가 두 개인 연산자를 말하며 여기에는 
-산술 연산자(+ , - , * , / , %) , 
-문자열 연결 연산자(+),
-대입 연산자(=， +=, -=, * =, / =, %=), 
-비교 연산자(< , <= , > , >= , == , !=), 
-논리 연산자(&& , || , ^)등이 있다.


	# 산술 연산자
-우리가 일반적으로 말하는사칙연산인 더하기(+), 빼기(-), 곱하기(*), 나누기(/)와 
  나머지를구 하는 연산자(%)를 포함해서 산술 연산자는 총 5개이다. 
-산술 연산자는 boolean 타입을 제외한 모든 기본타입에 사용할 수 있다.

-산술 연산자는 우리가 익히 알고 있기 때문에 따로 설명을 하지 않아도 될 것 같다.   
-주의할 점은 곱셈의 경우 연산자가 x가아니라 *를사용하고 나눗셉의 경우 /를사용한다.


===============================================================================================
	         연산식			|			설명				|
-----------------------------------------------------------------------------------------------
|   피연산자	|   +	|    피연산자	| 덧셈 연산						|
-----------------------------------------------------------------------------------------------
|   피연산자	|   -	|    피연산자	| 뺄셈 연산						|
-----------------------------------------------------------------------------------------------
|   피연산자	|   *	|    피연산자	| 곱셈 연산						|
-----------------------------------------------------------------------------------------------
|   피연산자	|   /	|    피연산자	| 좌측의 피연산자를 우측 피연산자로 나눗셈 연산			|
-----------------------------------------------------------------------------------------------
|   피연산자	|   %	|    피연산자	| 좌측의 피연산자를 우측 피연산자로 나눈 나머지 값을 구하는 연산		|
===============================================================================================

# % = 나머지 연산자)
# %연산자는 나눗셈을 수행하고 몫이 아닌 나머지를 돌려주는 연산자이다. 

-int result = num % 3
-int result = num % 3; 에서 result에 저장되는 값은 num의 값에 따라 0, 1, 2 중 한 값이 된다.
 왜냐하면 어떤 수를 3으로 나누었을 경우 나머지는 세 숫자중 하나이기 때문이다.
-산술 연산자의 특징은 피연산자들의 타입이 동일하지 않을 경우 다음과 같은 규칙을 사용해서 
 피연 산자들의 타입을 일치시킨 후 연산을 수행한다.

1) 피연산자들이 모두 정수 타입이고, int 타입(4byte)보다 크기가 작은 타입일 경우 
   모두 int 타입으로 변환 후, 연산을 수행한다. 따라서 연산의 산출 타입은 int이다. (int + int = int)

2) 피연산자들이 모두 정수 타입이고 long 타입이 있을 경우 모두 long 타입으로 변환 후， 연산을 수행한다.   
  따라서 연산의 산출 타입은 long이다. (long + long = long , long + int = long)

3) 피연산자 중 실수 타입(float 타입， double 타입)이 있을 경우, 크기가 큰 실수 타입으로 변환 후， 
  연산을 수행한다. 따라서 연산의 산출 타입은 실수 타입이다.  (double + double = double)


  정리
-long을 제외한 정수 타입 연산은 int 타입으로 산출
-피연산자 중 하나라도 실수 타입이면 실수 타입으로 산출된다
위 내용을 따른다면 다음 코드는 컴파일 에러가 발생한다.

class Main01 {
	public static void main(String[] args) {

	byte by1 = 1;
	byte by2 = 1;
	byte by3 = by1 + by2;	// 컴파일 에러 발생

	}
}
-상식적으로 생각하면 bytel 과 byte2를 덧셈하면 2가 나오고, 
정수 2는 lbyte로 표현 가능한 수이므로 byte 타입 변수인 byte3에 저장할 수 있을 것 같다. 
하지만 컴파일 에러가 나는데, long 타입을 제외한 정수의 산술 연산은 
무조건 int 타입으로 변환 후 연산을 수행하고, 산출 타입이 int이기 때문에 int타입 변수에 산출값을 대입해야 한다.
따라서 다음과 같이 수정해야 한다.

class Main01 {
	public static void main(String[] args) {
	byte byte1 = 1;
	byte byte2 =  1;
	int byte3 = byte1 + byte2;	// 정수를 연산하기 때문에 int형 변수를 사용해야 한다.
	System.out.println(byte3);
	}
}




-아래의 코드에서 결과값은 얼마가 나올까 생각해보자
class Main01 {
	public static void main(String[] args) {
	int int1 = 10;
	int int2 = 4;
	int result1 = int1 / int2; 
	System.out.println(result1);
	}
}

상식적으로 생각하면 int1 과 int2를 나눗셈하면 2.5가 나오지만 연산 결과는 소수점 이하 부분을 버리고 2만 산출된다. 
따라서 result1에는 2가 저장된다. 



class Main01 {
	public static void main(String[] args) {

	int int1 = 10;
	int int2 = 4;
	int result1 = int1 / int2; 
	System.out.println(result1);
	double result2 = int1 / int2;	// int/int = int 이므로 결과는 int형 2가되고 double로 대입시 2.0이된다.
	System.out.println(result2);
	}
}



-result2는은 double 타입 변수이므로 2.5가 저장시 연산 후의 결과가 2이므로 2를 실수화해서 2.0이 저장된다. 
-만약 2.5를 산출 결과로 얻고 싶다면 피연산자 중 최소한 하나는 실수 타입이어야 한다.  
 따라서 다음과 같이1.0을 곱하여 실수 타입으로 만든 후 산술 연산을 하거나 
-int1 과 int2 중 하나를 double 타입으로 강제 타입 변환(캐스팅)한 후 산술 연산을 하면 된다.

  1) double result2 = (int1 * 1.0) / int2;
  2) double result2 = (double)int1 / int2;
  3) double result2 = int1 / (double)int2;





  # char 타입 연산문제
class Main01 {
	public static void main(String[] args) {

	char ch1 = 'A';		// A = 65 이므로 대입이 가능하다
	char ch2 = 'A' + 1;		// A = 65 , 65 + 1이므로 가능하다
	//char ch3 = ch2 + 1;	// 컴파일 에러 발생 (ch2인 cha2가 int로 변환되어 int + int = int가된다.) 
	}			// int가 byte로 대입되려면 형변환해야 한다.
}
-'A' + 1 은 리터럴 문자 ‘A’에 1을 더한 것인데， 문자 A는 65라는 유니코드를 가지므로 'A' + 1 은 66이 된다. 
 따라서 66 인 유니코드는 문자 B이므로 c1에는 문자 B가 저장된다. 
-자바는 리터럴 간의 연산은 타입 변환 없이 해당 타입으로 계산하기 때문에 문제 없이 연산이 된다.
 그러나 변수 c2에 1을 더하면 c2는 int 타입으로 변환되고 1과 연산이 되기 때문에 
-산출 타입은 int 타입이 된다. 따라서 char 타입 변수 c3에 대입을 할 수 없어 컴파일 에러가 발생한다.
 강제 타입 변환(캐스팅)을 해서 char타입으로 얻어야 한다

class Main01 {
	public static void main(String[] args) {
	char ch1 = 'A';
	char ch2 = 'A' + 1;
	char ch3 = (char)(ch2 + 1);
	}
}




public class OperationExample09 {
	public static void main(String[] args) {
		
		// 3과목의 총점 , 평균을 구해서 출력하시오
		
		int engScore = 90;	// 영어 점수
		int korScore = 75;	// 국어 점수
		int matScore = 86;	// 수학 점수
		int totalScore = engScore + korScore + matScore;
		double avgScore = totalScore / 3.0;

		System.out.println("영어 점수 : " + engScore);
		System.out.println("국어 점수 : " + korScore);
		System.out.println("수학 점수 : " + matScore);
		System.out.println("총점 : " + totalScore);
		System.out.println("평균 : " + avgScore);
	}
}





======================================================================================================


	# 오버 플로우

-산술 연산을 할 때 주의할 점은 연산 후의 산출값이 산출 타입으로 충분히 표현 가능한지 살펴봐야 한다.   
 산출 타입으로 표현할 수 없는 값이 산출되었을 경우, 오버플로우가 발생하고 
 쓰레기값(엉뚱한 값)을 얻을 수 있기 때문이다. 다음 예제를 실행시켜보자

예를들어 int와 int를 연산후 연산의 결과값이 int의 범위를 넘어가게되면 오버플로우 현상이 발생할 수있다.

class OperEx02{
	public static void main(String[] args) {
		//byte	: -128 ~ +127
		byte a = 127;
		System.out.println(a);
	}
}
-byte는 범위가 -128 ~ +127까지이다.
-127은 기본 타입이 int 형이다. (정수의 기본값은 int이다.)
-JAVA는 int보다 작은 타입은 자동으로 형변환 되기 때문에 에러가 발생하지 않는다.




class OperEx02{
	public static void main(String[] args) {
		//byte	: -128 ~ +127
		byte a = 128;		<--- byte의 표현 범위를 초과했기 때문에 에러가 발생한다.
		System.out.println(a);
	}
}
-컴파일시 에러가 발생한다.
-Overflow는 발생하지 않는다.(Overflow는 연산시 발생한다.)





class OperEx02{
	public static void main(String[] args) {
		//byte	: -128 ~ +127
		byte a = 10 + 30;		<--- 정수간 산술연산이므로 결과값이 int 가 된다.
		System.out.println(a);
	}
}
-10과 30은 정수 상수(int)로 간주
-두 값을 더한 결과 10 + 30 = 40은 컴파일 시점에 계산
-40은 byte의 범위안에 있기 때문에, 컴파일러가 자동으로 int를 byte로 변환(컴파일 에러가 발생하지 않는다.)


class OperEx02{
	public static void main(String[] args) {
		byte a = 10 + 30;
		System.out.println(a);

		byte b = 100 + 30;		<--- 정수간 산술연산이므로 결과값이 int 가 된다.
		System.out.println(b);
	}
}
-100과 30도 정수 상수(int)로 간주
-두 값을 더한 결과 100 + 30 = 130은 컴파일 시점에 계산
-130은 byte의 범위를 초과합니다(127보다 큼). 따라서 컴파일러는 값이 byte 범위를 벗어난다는 것을 확인하고 
  컴파일 에러를 발생


class OperEx02{
	public static void main(String[] args) {
		byte a = 10 + 30;
		System.out.println(a);

		byte b = (byte)(100 + 30); 	// int로 산술 연산 후 형변환하여 대입
		System.out.println(a);
	}
}
-컴파일 후 파일을 실행하게되면 -126이 출력된다. (Overflow가 발생한다.)
-Overflow도 에러기 때문에 overflow가 발생할 것 같으면 타입을 변경해야 한다.

class Main01 {
	public static void main(String[] args) {

	int a = 1000000;
	int b = 1000000;
	int c = a * b;
	System.out.println(c);
	}
}

변수 x와 y는 int 타입이고 x * y 역시 int 타입이므로 연산의 산출 타입은 int 타입이다. 
위 코드는 컴파일 에러는 발생하지 않지만 변수 z 에는 올바른 값이 저장되지 않는다. 
그 이유는 1000000^6 * 1000000^6은 = 1000000^12 이되어  int 타입에 저장될 수 있는 값의 범위를 초과하게 된다.
그래서 쓰레기값인 -727379968을 얻게 된다. 상기 예제가 올바른 값을 얻기 위해서는 변수 x와 y중
최소하나라도 long 타입이 되어야하고, 변수 z가 long 타입이어야한다.




class Main01 {
	public static void main(String[] args) {

	long a = 1000000;
	long b = 1000000;
	long c = a * b;
	System.out.println(c);
	}
}



class Main01 {
	public static void main(String[] args) {

	int a = 1000000;
	int b = 1000000;
	long c = a * b;
	System.out.println(c);
	}
}

-같은 타입을 연산하면 해당 타입의 결과가 나온다.(int * int = int , long＋long = long)
 즉 int * int이므로 결과는 int가된다 연산에서 이미 int의 범위를 초과했다.
-서로 다른 타입을 연산하게되면 큰 타입이 결과로 나온다. (int + long = long)



class Main01 {
	public static void main(String[] args) {

	int a = 1000000;
	int b = 1000000;
	long c = a * (long)b;
	System.out.println(c);
	}
}










========================================================================================================

	# Infinity와 NaN , ArithmeticException

-자바에서 Infinity와 NaN은 부동소수점 연산(float 및 double)에서 발생하며, 
 ArithmeticException은 정수형 연산(int 및 long)에서 주로 발생한다.

/ 또는 % 연산지를 사용할 때도 주의할 점이 있다. 
좌측 피연산자가 정수 타입인 경우 나누는 수인 우측 피연산자는 0을 사용할 수 없다. 


	# Infinity
-Infinity는 양의 무한(+Infinity)과 음의 무한(-Infinity)으로 나뉘며, 주로 다음과 같은 연산에서 발생한다.
-연산 결과가 표현 가능한 최대 값을 초과할 때 Infinity가 발생한다.

public class Test01 {
	public static void main(String[] args) {
		
		double result1 = 1.0 / 0.0;	// +Infinity
		double result2 = -1.0 / 0.0; 	// -Infinity
		System.out.println(result1);
		System.out.println(result2);
	}
}




	# NaN (Not a Number)
-NaN은 "숫자가 아닌 값"으로, 수학적으로 정의되지 않거나 의미 없는 연산의 결과를 의미한다.
-대표적인 예는 0.0을 0.0으로 나누거나 음수의 제곱근을 계산할 때입니다.

public class Test01 {
	public static void main(String[] args) {
		double result3 = 0.0 % 0.0;
		System.out.println(result3);
	}
}



	# ArithmeticException
자바는 예외가 발생하면 실행이 즉시 중지되고 프로그램은 종료된다.
Exception(예외) 발생시 프로그램이 종료되지 않게하려면 예외 처리해야 한다.

주의! 0으로 나누기
# 10 / 0 과 같이 숫자는 0으로 나눌 수 없다. (수학에서 허용하지 않음)
# 1방금 예제에서 변수 b = 0 을 대입하면 5 / 0 이 된다. 이 경우 프로그램에 오류가 발생한다.
# 1실행하면 다음과 같은 예외를 확인할 수 있다.

public class Test01 {
	public static void main(String[] args) {
		int result = 10 / 0;
		System.out.println(result);
	}
}


# 예외가 발생하면 해당 시점 이후의 결과가 출력되지 않고 프로그램이 종료된다. 
  (예외에 대한 자세한 부분은 예외 처리에서 다룬다.)



======================================================================================================


	# 문자열 연결 연산자(+)

-String변수에서 +는 덧셈이 아닌 연결을 의한다.

class OperEx02{
	public static void main(String[] args) {
		System.out.println("Hello" + "World");
	}
}



class OperEx02{
	public static void main(String[] args) {
		// 문자열과 문자열 더하기
		System.out.println("Hello" + "World");
		System.out.println("Hello" + "100");

		// 문자열과 문자열 더하기2
		String result = "Hello" + "World";
		System.out.println(result);
	}
}



class OperEx02{
	public static void main(String[] args) {
	~~~~~~~~~~~ 중간 생략 ~~~~~~~~~~~

		//문자열과 숫자 더하기1
		System.out.println("문자열" +  100);
	}
}	

class OperEx02{
	public static void main(String[] args) {
	~~~~~~~~~~~ 중간 생략 ~~~~~~~~~~~
		//문자열과 숫자 더하기2
		String result3 = "a + b = " + 10;
		System.out.println(result3);
	}
}	



class OperEx02{
	public static void main(String[] args) {
	~~~~~~~~~~~ 중간 생략 ~~~~~~~~~~~
		//문자열과 숫자 더하기3
		int num = 20;
		String str = "a + b = " + num;
		System.out.println(str);
	}
}	


문자열 연결 연산자인 +는 문자열을 서로 결합히는 연산자이다.
+ 연산자는 산술 연산자, 부호 연산자인 동시에 문자열 연결 연산자이기도하다. 
피연산자중 한쪽이 문자열이면 + 연산자는 문자열 연결 연산자로 사용되어 
다른 피연산자를 문자열로 변환하고 서로 결합한다.  

문자열과 숫자가 혼합된 + 연산식은 왼쪽에서부터 오른쪽으로 연산이 진행된다. 

아래 코드에서 변수 str1에는 문자열 ‘JDK6.0"이 저장되고. str2는 문자열 ‘JDK6.0 특징”이 저장된다.

  String str1 = "JDK" + 6.0;
  String str1 = str1 + " 특징";
 

  "JDK" + 3 + 3.0;

문자열과 숫자가 혼합된 + 연산식은 왼쪽에서부터 오른쪽으로 연산이 진행된다. 
따라서 ‘ jDK" + 3이 먼저 연산되어 "jDK3"이라는 문자열이 되고， 
이것을 다시 3.0과 연산하여 "jDK33.0"이라는 문자열 결과가 나온다.


  3 + 3.0 + "JDK";

3 + 3.0이 먼저 연산되어 6.0이라는 실수값이 되고 이것을 "jDK"와 연산하여 "6.0JDK"라는 결과가 나온다. 
어떤 것이 먼저 연산되느냐에 따라 다른 결과가 나오므로 주의할 필요가 있다.




======================================================================================================

		## 비교 연산자

-비교 연산자는 대소(<，<=， >，>=) 또는 동등( ==， !=)을 비교해서 boolean 타입인 true/false를 산출한다. 
-대소 연산자는 boolean 타입을 제외한 기본 타입에 사용할 수 있고 동등 연산자는 모든 타입에 사용될 수 있다. 
-비교 연산자는 흐름 제어문인 조건문(if), 반복문(for, while)에서 주로 이용되어 실행 흐름을 제어할 때 사용된다.

	==	: 같다 (equal to)
	!=	: 같지않다. (not equal to)

	>	: 크다 (greater than)
	<	: 작다 (less than)

	>=	: 크거나 같다 (greater than or equal to)
	<=	: 작거나 같다 (less than or equal to)




만약 피연산자가 char 타입이면 유니코드 값으로 비교 연산을 수행한다. 
예를 들어 ‘A’의 유니코드는 65 이고, ‘B’의 유니코드는 66이므로 비교 연산자는 65와 66을 비교하게 된다.

class OperEx03{
	public static void main(String[] args) {

	int num1 = 10;
	int num2 = 10;
	boolean result1 = (num1 == num2);	// num1과 num2는 모두 10이므로 true가 산출된다.
	boolean result2 = (num1 != num2);	// num1과 num2는 모두 10이므로 false가 산출된다.
	System.out.println(result1);
	System.out.println(result2);
	}
}

class OperEx03{
	public static void main(String[] args) {

	char char1 = 'A';	// 자바는 문자를 유니코드로(정수) 저장한다. 'A' =65
	char char2 = 'B';	// 자바는 문자를 유니코드로(정수) 저장한다. 'B' =66
	boolean result1 = (char1 == char2);
	boolean result2 = (char1 != char2);
	boolean result3 = (char1 < char2);
	System.out.println(result1);
	System.out.println(result2);
	System.out.println(result3);
	}
}








  'A' == 65  ---> true
   3 == 3.0  ---> true


비교 연산자에서도 연산을 수행하기 전에 타입 변환을 통해 피연산자의 타입을 일치시킨다.   
예를들어, 'A’ == 65는 x가 int 타입으로 변환되어 65가 된 다음 65 == 65로 비교한다. 
마찬가지로 3 == 3.0 에서 3은 int 타입이고 3.0은 double 타입이므로 
int 타입인 3을 보다 큰 타입인 double 타입으로 변환한 다음 3.0 == 3.0으로 비교한다.


public class OperationExample01 {
	public static void main(String[] args) {
		
		
		// int와 double을 비교시 타입을 일치시킨 후 비교 연산이 가능하다.
		// int와 double을 비교시 int를 double로 타입 변환 후 연산한다.
		System.out.println(10 == 10.0);
		// 문자열은 대/소 비교할 수 없다. (동등 비교는 가능하다.)
	}
}




======================================================================================================

	# 문자열 비교

String 타입의 문자열을 비교할 때에는 대소(< ， <= , > , > = ) 연산자를 사용할 수 없고， 
동등(== , !=) 비교 연산자는 사용할 수 있으나 문자열이 같은지 다른지를 비교하는 용도로는 사용되지 않는다. 
기본 타입 (byte, char, short, int, long, float , double, boolean)인 변수의 값을 비교할 때 에는
연산자를 사용하지만 참조 타입인 String 변수를 비교할 때 연산자를 사용하면 
원하지않는 결과가 나올수도 있다. 다음코드를 보면서 이해해보자.
(EX :　"abc" < "def" 와 같이 대소 비교는 할 수 없다.)

 String strVar1 = "자바";
 String strVar2 = "자바";
 String strVar3 = new String("자바");
　     
자바는 문자열 리터럴이 동일하다면 동일한 String 객체를 참조하도록 되어 있다. (String은 값이 아닌 주소를 가진다.)
그래서 변수 strVar1 과 strVar2는 동일한 String 객체의 번지값을 가지고 있다. 
그러나 변수 strVar3은 객체생성 연산자인 new로 생성한 새로운 String 객체의 번지값을 가지고 있다.
                        
이 경우 변수 strVarl과 strVar2의  연산은 true를 산출하고 strVar2와 strVar3의  연산은
false를 산출한다  연산자는 변수에 저장된 값만 비교하기 때문에 이러한 결과가 나온다.

동일한 String 객체이건 다른 String 객체이건 상관없이 String 객체의 문자열만을 비교하고 싶다면 
연산자 대신에 equals() 메소드를 사용해야 한다. equals() 메소드는 원본 문자열과 매개 값으로 주어진 
비교 문자열이 동일한지 비교한 후 true 또는 false를 리턴한다.



public class OperationExample02 {

	public static void main(String[] args) {
		// 문자열 동등비교 (문자열은 대/소 비교할 수 없다.)
		
//		String str1 = "장안대";
//		String str2 = "장안대";
//		String str3 = new String("장안대");
//		String str4 = "장안대";
//		System.out.println("str1 : " + str1);
//		System.out.println("str2 : " + str2);
//		System.out.println("str3 : " + str3);
//		System.out.println("str4 : " + str4);
//		System.out.println();
//		
//		System.out.println("== 연산자는 String 변수안에 있는 주소를 비교한다.");
//		System.out.println("str1 == str2 : " + (str1 == str2));
//		System.out.println("str1 == str3 : " + (str1 == str3));
//		System.out.println();
//		
//		System.out.println("equals() 메서드는 실제 문자열의 값을 비교한다.");
//		System.out.println("str1.equals(str2) : " + str1.equals(str2));	// true
//		System.out.println("str1.equals(str3) : " + str1.equals(str3));	// true
//		System.out.println("str1.equals(str4) : " + str1.equals(str4));	// false
		
//		String str1 = "장안대";
//		String str2 = "장안대";
//		String str3 = new String("장안대");
//		String str4 = "수원대";
//		
//		if(str1.equals(str2)) {
//			System.out.println("str1과 str2의 값이 동일합니다.");
//		} else {
//			System.out.println("str1과 str2의 값다릅니다.");
//		}
//		
//		if(str1.equals(str3)) {
//			System.out.println("str1과 str3의 값이 동일합니다.");
//		} else {
//			System.out.println("str1과 str3의 값다릅니다.");
//		}
//		
//		if(str1.equals(str4)) {
//			System.out.println("str1과 str4의 값이 동일합니다.");
//		} else {
//			System.out.println("str1과 str4의 값다릅니다.");
//		}
		
		
		String str1 = "장안대";
		String str2 = "장안대";
		String str3 = new String("장안대");
		String str4 = "장안대";
		
		// hashCode (해당 메모리의 주소를 HashCode로 사용한다.)
		System.out.println(System.identityHashCode(str1));
		System.out.println(System.identityHashCode(str2));
		System.out.println(System.identityHashCode(str3));
		System.out.println(System.identityHashCode(str4));
	}
}





======================================================================================================

		# 논리 연산자

# 논리 연산자는 boolean타입인 true, false를 비교하는데 사용한다.
# && (AND) : 두 피연산자가 모두 참이면 참을 반환, 둘중 하나라도 거짓이면 거짓을 반환
# || (OR) : 두 피연산자 중 하나라도 참이면 참을 반환, 둘다 거짓이면 거짓을 반환
# ! (부정) : 피연산자의 논리적 부정을 반환. 즉, 참이면 거짓을, 거짓이면 참을 반환

-AND(논리곱)
 #　조건이 모두 true인 경우에만 연산 결과는 true가 된다.
 #　true && true 	= true
 #　true && false 	= false
 #　false && true 	= false (첫번째 조건이 false일 경우 결과는 false이므로 실제로 계산하지 않는다.) (&는 계산함)
 #　false && false 	= false (첫번째 조건이 false일 경우 결과는 false이므로 실제로 계산하지 않는다.) (&는 계산함

-OR(논리합)
 #　조건중 한가지만 true여도 결과는 true가 된다.
 #　true || true 	= true
 #　true || false 	= true (첫번째 조건이 true일 경우 결과는 true이므로 실제로 계산하지 않는다.) (|는 계산함
 #　false || true 	= true (첫번째 조건이 true일 경우 결과는 true이므로 실제로 계산하지 않는다.) (|는 계산함
 #　false || false 	= false


-XOR(배타적 논리합)
-비교 조건이 같으면 false가된다.
 #　true ^ true 	= false  (비교조건이 둘다 true이므로 false가 된다.)
 #　true ^ false 	= true
 #　false ^ true 	= true
 #　false ^ false 	= false  (비교조건이 둘다 false이므로 false가 된다.)


public class OperationExample03 {
	public static void main(String[] args) {

		System.out.println("----------논리곱------------");
		System.out.println(true && true);
		System.out.println(true && false);
		System.out.println(false && true);
		System.out.println(false && false);
		
		System.out.println("----------논리합------------");
		System.out.println(true || true);
		System.out.println(true || false);
		System.out.println(false || true);
		System.out.println(false || false);
		
		System.out.println("---------배타적 논리합-------------");
		System.out.println(true ^ true);
		System.out.println(true ^ false);
		System.out.println(false ^ true);
		System.out.println(false ^ false);

	}
}




======================================================================================================

		## 비트 연산자

-비트 연산자는 JAVA에서 사용하지 않는다.
-하지만 진수변환은 중요하므로 진수변환에 대해서 알아보자

-2진수	: 0, 1		(데이터 전송)
-8진수	: 0 ~７		(하드웨어 메모리 체계)
-10진수	: 0 ~ 9
-16진수	: 0 ~ 15 (0 ~ F) (IPv6)

-0000 = 0
-0001 = 1
-0010 = 2
-0011 = 3
-0100 = 4
-0101 = 5
-0110 = 6
-0111 = 7
-1000 = 8
-1001 = 9
-1010 = A
-1011 = B
-1100 = C
-1101 = D
-1110 = E
-1111 = F



-10진수 172를 2진수 , 8진수 16진수로 변환
-172(2진수)	: 10101100
-172(8진수)	: 2 5 4	= 10 101 100 (8진수는 2진수를 3자리씩 끊어서 읽는다.)
-172(16진수)	: A C	= 1010 1100


EX1) 8진수 374를 각 진수로 변환해보자
-2진수	: 11 111 100 
-8진수	: 0374
-10진수	: 252
-16진수	: 0xFC




EX2) 16진수 7D를 각 진수로 변환해보자
-2진수	: 01111101
-8진수	: 0175
-16진수	: 0x7D




EX3) 10진수 168를 2진수 , 8진수 16진수로 변환
-2진수	: 10101000
-8진수	: 0250
-16진수	: 0xA8







======================================================================================================

		## 대입 연산자
          


-대입 연산지는 오른쪽 피연산자의 값을 좌측 피연산자인 변수에 저장한다. 
-오른쪽 피연산지는 리터럴 및 변수, 그리고 다른 연산식이 올 수 있다. 
-단순히 오른쪽 피연산자의 값을 변수에 저장하는 단순 대입 연산자가 있고, 
  정해진 연산을 수행한 후 결과를 변수에 저장하는 복합 대입 연산자도 있다.

대입 연산지는모든 연산자들 중에서 가장 낮은 연산순위를가지고 있기 때문에 제일 마지막에 수행된다. 
그리고 연산의 진행 방향이 오른쪽에서 왼쪽이기 때문에 a=b=c=s;는 다음 순서로 연산된다.
                                   
class OperEx04 {
	public static void main(String[] args) {
		int a = 10;	// 오른쪽 10의 값을 왼쪽의 변수에 대입 (변수에 저장된 값이 변경된다.)
	}
}





  	# 복합(축약) 대입 연산자
# 산술 연산자와 대입 연산자를 한번에 축약해서 사용할 수 있는데, 이것을 복합(축약)대입 연산자라 한다.
# 연산자 종류:  += ,  -= ,  *= ,  /= ,  %=
# 이 연산자는 연산과 대입을 한번에 축약해서 처리한다. 다음 왼쪽과 오른쪽의 결과는 같다.


public class OperationExample05 {
	public static void main(String[] args) {
		
		int a = 10;	// 대입 연산자
		System.out.println("a = " + a);
		
		a += 10;	// 복합대입 연산자
		System.out.println("a += " + a);
		
		a -= 10;	// 복합대입 연산자
		System.out.println("a -= " + a);
		
		a *= 10;	// 복합대입 연산자
		System.out.println("a *= " + a);
		
		a /= 10;	// 복합대입 연산자
		System.out.println("a /= " + a);
		
		a %= 10;	// 복합대입 연산자
		System.out.println("a %= " + a);
	}
}




















