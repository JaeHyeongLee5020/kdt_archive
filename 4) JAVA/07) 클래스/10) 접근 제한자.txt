			## 접근 제한자
 
main() 메소드를 가지지 않는 대부분의 클래스는 외부클래스에서 이용할 목적으로 설계된 라이브러리 클래스이다. 
라이브러리 클래스를 설계할 때에는 외부 클래스에서 접근할 수 있는 멤버와 
접근할 수 없는 멤버로 구분해서 필드, 생성자, 메소드를 설계하는 것이 바람직하다. 

객체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 
객체의 특정 데이터를 보호하기 위해 해당 필드에 접근하지못하도록 막아야 한다. 
그리고 특정 메소드를 호출할 수 없도록 제한할 필요가 있다. 
자바는 이러한 기능을 구현하기 위해 접근 제한자(Access Modifier)를 제공하고 있다.

접근 제한자는 public, protected, default, private과 같이 네 가지 종류가 있다. 
public 접근 제한자는 단어의 뜻 그대로, 공개한다는 의미를 가지고 있다. 
public 접근 제한자는 외부 클래스가 자유롭게 사용할 수 있는 공개 멤버를 만든다. 
protected 접근 제한자는 같은 패키지 또는 자식 클래스에서 시용할 수 있는 멤버를 만든다. 
private 접근 제한자는 단어의 뭇 그대로 개인적인 것이라 외부에 노출되지 않는 멤버를 만든다. 
위 세 가지 접근 제한자가 적용되지 않은 멤버는 default 접근 제한을 가진다. 
default 접근 제한자는 같은 패키지에 소속된 클래스에서만 사용할 수 있는 멤버를 만든다. 
                        

=========================================================================================
 접근제한		|		적용대상		|		접근할 수 없는 클래스		|
=========================================================================================
   public		| 클래스, 필드, 생성자, 메소드		| 없음					|
-----------------------------------------------------------------------------------------
   protected	| 필드, 생성자, 메소드		| 자식 클래스가 아닌 다른 패키지에 소속된 클래스	|
-----------------------------------------------------------------------------------------
   default		| 클래스, 필드, 생성자, 메소드		| 다른 패키지에 소속된 클래스			|
-----------------------------------------------------------------------------------------
   private		| 필드, 생성자, 메소드		| 외부 모든 클래스				|
=========================================================================================





===================================================================================================


	# 클래스의 접근 제한

-클래스를 선언할 때 고려해야 할 사항은 같은 패키지 내에서만 사용할 것인지, 
 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지를 결정해야 한다.   
-클래스에 적용할 수 있는 접근 제한은 public과 default 단 두 가지인데, 다음과 같은 형식으로 작성한다.


	// default 접근 제한 
	class 클래스 {
	}

	// public 접근 제한 
	public class 클래스 {
	}



	# default 접근제한
-클래스를 선언할 때 public을 생략했다면 클래스는 default 접근 제한을 가진다. 
-클래스가 default 접근 제한을 가지게 되면 같은 패키지에서는 아무런 제한 없이 사용할 수 있지만 
 다른 패키지에서는 사용할 수 없도록 제한된다.
                       


	# public 접근제한
-클래스를 선언할 때 public 접근 제한지를 붙였다면 클래스는 public 접근 제한을 가진다. 
-클래스가 public 접근 제한을 가지게 되면 같은 패키지뿐만 아니라 
 다른 패키지에서도 아무런 제한 없이 사용할 수 있다. 
-클래스를 다른 개발자가 사용할 수 있도록 라이브러리 클래스로 개발되어야 한다면, 
 반드시 public 접근 제한을 갖도록 해야 한다. 
-인터넷으로 배포되는 리어브러리 클래스들도 모두 public 접근 제한을 가지고 있다.
                       




===================================================================================================

	# 생성자의 접근 제한

-객체를 생성하기 위해서는 new 연산자로 생성자를 호출해야 한다.  
 하지만 생성자를 어디에서나 호출할 수 있는 것은 아니다.   
-생성자가 어떤 접근 제한을 갖느냐에 따라 호출 가능 여부가 결정된다.
-생성자는 다음과 같이 public , protected, default, private 접근 제한을 가질 수 있다.


	public class ClassName  {

		// public 접근 제한 
		public ClassName (...) {  ...  } 

		// protected 접근 제한
		protected ClassName (...) {  ...  } 

		// default  접근 제한
		ClassName (...) {  ...  } 

		// private  접근 제한
		private ClassName (...) {  ...  } 
	}


-클래스에 생성자를 선언하지 않으면 컴파일러에 의해 자동적으로 기본 생성자가 추가된다.   
-자동으로 생성되는 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일하다. 
-클래스가 default 접근 제한을 가지면 기본 생성자도 default 접근 제한을 가지고， 
 클래스가 public 접근 제한을 가지면 기본 생성자도 public 접근 제한을 가진다.



  # public
public 접근 제한은 모든 패키지에서 아무런 제한 없이 생성자를 호출할 수 있도록 한다. 
생성자가 public 접근 제한을 가진다면 클래스도 public 접근 제한을 가지는 것이 정상적이다. 
클래스가 default 접근 제한을 가진다면 클래스 사용이 같은 패키지로 한정되므로 
비록 생성자가 public 접근 제한을 가지더라도 같은 패키지에서만 생성자를 호출할 수 있다.

  # protected 
protected 접근 제한은 default 접근 제한과 마찬가지로 
같은 패키지에 속하는 클래스에서 생성자를 호출할 수 있도록 한다. 
차이점은 다른 패키지에 속한 클래스가 해당 클래스의 자식(child) 클래스라면 생성자를 호출할 수 있다


  # default
생성자를 선언할 때 public 또는 private를 생략했다먼 생성자는 defauIt 접근 제한을 가진다. 
default 접근 제한은 같은 패키에서는 아무런 제한 없이 생성자를 호출할 수 있으나，
다른 패키지에서는 생성자를 호출할 수 없도록 한다.


  # private
private 접근 제한은 동일 패키지이건 다른 패키지이건 상관없이 생성자를 호출하지 못하도록 제한한다.
따라서 클래스 외부에서 new 연산지로 객체를 만들 수 없다. 
오로지 클래스 내부에서만 생성자를 호출할 수 있고 객체를 만들 수 있다.








===================================================================================================

	# 필드와 메소드의 접근 제한

필드와 메소드를 선언할 때 고려해야 할 사항은 클래스 내부에서만 사용할 것인지,
패키지 내에서만 사용할 것인지, 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지를 결정해야 한다. 
이것은 필드와 메소드가 어떤 접근 제한을 갖느냐에 따라 결정된다. 
필드와 메소드는 다음과 같이 public , protected, default, private 접근 제한을 가질 수 있다.


	//필드 선언
	[ public || protected  || private ] 타입 필드;

	//메소드 선언
	[ public || protected  || private ] 리턴 타입 메소드( ..  )  { ... }


  # public
public 접근 제한은 모든 패키지에서 아무런 제한 없이 필드와 메소드를 시용할 수 있도록 해준다. 
필드와 메소드가 public 접근 제한을 가질 경우 클래스도 public 접근 제한을 가져야 한다.
클래스가 default 접근 제한을 가지게 되면 같은 패키지 안에서만 클래스가 사용되기 때문이다.

  # protected 
protected 접근 제한은 default 접근 제한과 마찬가지로 같은 패키지에 속하는 클래스에서 
필드와 메소드를 시용할 수 있도록 한다. 
차이점은 다른 패키지에 속한 클래스가 해당클래스의 지식 클래스라면 필드와 메소드를 사용할 수 있다

  # default
필드와 메소드를 선언할 때 public 또는 private를 생략했다면 default 접근 제한을 가진다.
default 접근 제한은 같은 패키지에서는 아무런 제한 없이 필드와 메소드를 사용할수 있으나,
다른 패키지에서는 필드와 메소드를 사용할수 없도록 한다.

  # private
private 접근 제한은 동일 패키지이건 다른 패키지이건 상관없이 필드와 메소드를 사용하지 못하도록 제한한다. 
오로지 클래스 내부에서만 사용할 수 있다.










