		## 생성자

-생성자(Constructor)는 new 연산자와 같이 사용되어 
 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화를 담당한다. 
-객체 초기화란 필드를 초기화하거나, 메소드를 호출해서 객체를 사용할 준비를 하는 것을 말한다. 
-생성자를 실행시키지 않고는 클래스로부터 객체를 만들 수 없다. 
-new 연산자에 의해 생성자가 성공적으로 실행되면 힙(heap) 영역에 객체가 생성되고 객체의 주소가 return된다. 
-return된 객체의 주소는 클래스 타입 변수에 저장되어 객체에 접근할 때 사용된다. 
-만약 생성자가 성공적으로 실행되지 않고 예외(에러)가 발생했다면 객체는 생성되지 않는다.


	# 기본 생성자
-모든 클래스는 생성자가 반드시 존재하며 하나 이상을 가질 수 있다. 
-우리가 클래스 내부에 생성자 선언을 생략했다면 컴파일러는 
 다음과 같이 중괄호 { } 블록 내용이 비어있는 기본 생성자(Default Constructor)를 바이트 코드에 자동 추가시킨다.

-클래스가 public class로 선언되면 기본 생성자에서도 public이 붙지만, 
 클래스가 public 없이 class로만 선언되면 기본 생성자에도 public이 붙지 않는다. 
-public에 대한 의미는 접근 제한자에서 알아보기 로 하고 지금은 그냥 넘어가도록 하자. 

예를 들어 Car 클래스를 설계할 때 생성자를 생략하면 기본 생성자가 다음과 같이 생성된다.

자바 소스파일(Car.java)
바이트 코드 파일(Car.class)

	public class Car {

	}

	public class Car {
		Car(){	// 기본 생성자(자동생성)
		}
	}

그렇기 때문에 클래스에 생성자를 선언하지 않아도 다음과 같이 
new 연산자 뒤에 기본 생성자를 호출해서 객체를 생성시킬 수 있다.


	Car myCar = new Car();       <--- Car()는 기본 생성자 호출


그러나 클래스에 명시적으로 선언한 생성자가 한 개라도 있으면, 컴파일러는 기본 생성자를 추가하지 않는다. 
명시적으로 생성자를 선언하는 이유는 객체를 다양하게 초기화하기 위해서이다. 
그럼 생성자를 명시적으로 선언하는 방법에 대해 알아보자.





	# 생성자 선언

-기본 생성자 대신 우리가 생성자를 명시적으로 선언하려면 다음과 같은 형태로 작성하면 된다.

public class Car {

	public Car( 매개변수 선언, 매개변수 선언... ){
		객체 초기화 코드;

	}
}

-생성자는 메소드와 비슷한 모양을 가지고 있으나, 리턴 타입이 없고 클래스 이름과 동일하다. 
-생성자 블록 내부에는 객체 초기화 코드가 작성되는데, 
 일반적으로 필드에 초기값을 저장하거나 메소드를 호출하여 객체 사용 전에 필요한 준비를 한다. 
-매개 변수 선언은 생략할 수도 있고 여러 개를 선언할 수 있다.
-매개 변수는 new 연산자로 생성자를 호출할 때 외부의 값을 생성자 블록 내부로 전달하는 역할을 한다. 


-3개의 매개값을 생성자가 받기 위해서는 다음과 같이 생성자를 선언해야 한다.

	public class Car {

		Car(String model, String color, int maxSpeed) {

		}
	}

-두 개의 매개값은 String 타입이고 마지막 매개값은 int 타입인 것을 볼 수 있다. 

-객체 생성시 Car 생성자를 호출할 때 세 개의 값을 매개변수와 각 매개변수에 맞는 타입으로 작성해야 한다.

	Car myCar = new Car( "그랜저", "검정", 300 );

-클래스에 생성자가 명시적으로 선언되어 있을 경우에는 반드시 선언된 생성자를 호출해서 객체를 생성해야만 한다. 
-개발자가 선언한 생성자가 있는 경우 컴파일러는 기본 생성자를 자동으로 추가하지 않는다.







다음 예제를 보면 Car클래스에 생성자 선언이 있기 때문에 
기본 생성자(Car())를 호출해서 객체를 생성할 수 없고 Car(String color, int cc)를 호출해서 객체를 생성해야 한다.

public class Car {

	String color;	// 필드 선언
	int cc;		// 필드 선언
	
	Car(String color, int cc){	// 매개변수 2개짜리 생성자 선언 (기본생성자는 만들어지지 않는다.)
	}

}


public class CarExample {
	public static void main(String[] args) {
		// 컴파일 에러 발생 (생성자를 직접 선언했기때문에 기본 생성자로는 객체를 생성할 수 없다.)
		//Car myCar = new Car();
		
		// 개발자가 선언한 생성자를 매개변수로 객체를 생성
		Car myCar1 = new Car("검정", 2000);
		Car myCar2 = new Car("파랑", 3000);

		System.out.println(myCar1);		// myCar1과 myCar2는 서로 다른 객체이다.
		System.out.println(myCar2);		// myCar1과 myCar2는 서로 다른 객체이다.
		
		System.out.println(myCar2.cc);	// 객체 생성시 넣어준 매개 변수값이 
		System.out.println(myCar2.color);	// 필드에 대입되지 않았다.
}









	# 필드 초기화

클래스로부터 객체가 생성될 때 필드는 기본 초기값으로 자동 설정된다. 
만약 다른 값으로 초기화를 하고 싶다면 두 가지 방법이 있다. 
하나는 필드를 선언할 때 초기값을 주는 방법이고, 또 다른 하나는 생성자에서 초기값을 주는 방법이다. 
필드를 선언할 때 초기값을 주게 되면 동일한 클래스로부터 생성되는 객체들은 모두 같은 데이터를 갖게 된다. 
물론 객체 생성 후 변경할 수 있지만, 객체 생성 시점에는 필드의 값이 모두 같다. 
예를 들어 다음과 같이 Korean 클래스에 nation필드를 선언하면서 "대한민국"으로 초기값을 준 경우 
Korean 클래스로부터 kor1과 kor2 객체를 생성하면 	//
korl과 kor2 객체의 nation 필드에는 모두 “대한민국”이 저장되어 있다.


public class Korean {
	String nation = "대한민국";
	String name;	// String의 기본값은 null이다.
	String ssn;	// String의 기본값은 null이다.
}


public class KoreanExample {
	public static void main(String[] args) {
		
		Korean kor1 = new Korean();
		Korean kor2 = new Korean();
		
		System.out.println(kor1.nation);
		System.out.println(kor2.nation);
	}
}



하지만 객체 생성 시점에 외부에서 제공되는 다양한 값들로 초기화되어야 한다면 생성자에서 초기화를 해야 한다. 
위 코드에서 name(이름)과 ssn(주민변호) 필드값은 클래스를 작성할때 초기값을 줄 수 없고 
객체 생성 시점에 다양한 값을 가져야 한다. 따라서 생성자의 매개값으로 이 값들을 받아 초기화하는 것이 맞다

public class Korean {
	
		String nation = "대한민국";
		String name;
		String ssn;
		
		Korean(String n, String s){	// 매개변수(지역변수) 2개짜리 생성자
		}
}



public class KoreanExample {
	public static void main(String[] args) {
		
		Korean kor1 = new Korean("홍길동", "981205-1435684");	// 이름과 주민번호를 매개변수로
		Korean kor2 = new Korean("뽀로로", "010215-3254597");	// 객체를 생성할 수 있다.
		
		System.out.println(kor1.nation);
		System.out.println(kor1.name);
		System.out.println(kor1.ssn);
		System.out.println();
		
		System.out.println(kor2.nation);
		System.out.println(kor2.name);
		System.out.println(kor2.ssn);
	}
}

-이름과 전화번호를 매개로 객체를 생성했지만 이름과 전화번호가 필드에 적용되지 않았다.
-생성자에서 매개변수로 받은 정보는 필드에 대입해주어야 한다.


public class Korean {
		String nation = "대한민국";
		String name;
		String ssn;
		
		Korean(String n, String s){
			name = n;	// 객체 생성시 받은 매개 변수를 필드에 대입해야 한다.
			ssn = s;		// 객체 생성시 받은 매개 변수를 필드에 대입해야 한다.
		}
}
           
 
Korean 생성자의 매개 변수 이름은 각각 n과 S를 사용했다. 
매개 변수의 이름이 너무 짧으면 코드의 가독성이 좋지 않기 때문에 
가능하면 초기화시킬 필드 이름과 비슷하거나 통일한 이름을 사용할 것을 권한다. 

관례적으로 필드와 동일한 이름을 갖는 매개 변수를 사용한다. 
이 경우 필드와 매개변수 이름이 동일하기 때문에 생성자 내부에서 해당 필드에 접근할 수 없다.   
왜냐하면 생성자 내부에서는 이름이 같을 경우 매개 변수가 사용 우선순위가 더 높다.
해결 방법은 필드 앞에 "this."를 붙이면 된다. 
this는 객체 자신의 참조인데 우리가 우리 자신을 “나”라고 하듯이 객체가 자기 자신을 this라고 한다.
"this.필드"는 this라는 참조 변수로 필드를 사용하는 것과 동일하다. 
this를 이용하여 Korean 생성자를 수정하면 다음과 같다.

public class Korean {
		String nation = "대한민국";
		String name;
		String ssn;
		
		Korean(String name, String ssn){
			this.name = name;
			this.ssn = ssn;
		}
}
                       
객체의 필드는 하나가 아니라 여러 개가 있고 이 필드들을 모두 생성자에서 초기화한다면 
생성자의 매개 변수의 수는 객체의 펼드 수만큼 선언되어야 한다.  
그러나 실제로는 중요한 몇 개 필드만 매개 변수를 통해 초기화되고 
나머지 필드들은 필드 선언 시에 초기화하거나 생성자 내부에서 임의의 값 또는 계산된 값으로 초기화한다. 
아니면 객체 생성 후에 필드 값을 별도로 저장하기도 한다.










====================================================================================

	# 생성자 오버로딩(Overloading)

외부에서 제공되는 다양한 데이터들을 이용해서 객체를 초기화하려면 생성자도 다양화될 필요가 있다. 
Car 객체를 생성할 때 외부에서 제공되는 데이터가 없다면 기본 생성자로 Car 객체를 생성해야 하고,
외부에서 model 데이터가 제공되거나 model과 color가 제공될 경우에도 Car 객체를 생성할 수 있어야 한다. 
생성자가 하나뿐이라면 이러한 요구 조건을 수용할 수 없다. 
그래서 자바는 다양 한 방법으로 객체를 생성할 수 있도록 생성자 오버로딩(Overloading)을 제공한다. 

생성자 오버로딩이란 매개변수의 타입, 개수, 순서가 다른 생성자를 여러개 선언하는 것을 말한다.

	public class 클래스명 {

		public 클래스명( 변수타입 변수명, 변수타입 변수명) {

		}
	}



다음은 Car 클래스에서 생성자를 오버로딩한 예를 보여준다.

	public class Car  {
		public Car ()  {					// 기본 생성자
		public Car (String model ) { }				// 매개변수가 1개인 생성자
		public Car (String model ,  String color) { }		// 매개변수가 2개인 생성자
		public Car (String model ,  String color,  int maxSpeed ) { }	// 매개변수가 3개인 생성자
		}
	}



생성자가 오버로딩되어 있을 경우, new 연산자로 생성자를 호출할 때 제공되는 
매개값의 타입과 수에 의해 호출될 생성자가 결정된다.
다음은 다양한 방법으로 Car 객체를 생성한다.

	Car car1 = new Car ();
	Car car2 = new Car(" 그랜저");
	Car car3 = new Car("그랜져", "흰색");
	Car car4 = new Car("그랜저", "흰색", 300);



생성자 오버로딩시 주의할 점은 매개 변수의 타입과 개수 그리고 선언된 순서가 똑같을 경우 매개
변수 이름만 바꾸는 것은 생성자 오버로딩이라고 볼 수 없다. 다음과 같은 경우에 해당된다.

	Car (String model ,  int speed) { }	// 오버로딩 X
	Car (String name ,  int phone) { }	// 오버로딩은 변수타입과 개수 , 순서가 모두 달라야 한다.



	# 매개변수를 사용한 생성자 오버로딩
public class Tv {
	String brand;		// 브랜드
	int inch;			// 크기
	boolean power;		// 전원 on/off
	int channel;		// 채널
	int vol;			// 볼륨
	
	Tv() {	// 기본 생성자 (생략하면 자바는 컴파일시 자동으로 생성한다.)
		channel = 100;
	}

//	Tv() {	// 기본생성자와 구분할수 없기때문에 컴파일 에러가 발생한다.
//	}

	Tv(int channel) {	// 매개변수 1개짜리 생성자
		this.channel = channel;
	}
}

public class TvFactory {
	public static void main(String[] args) {
		Tv tv1 = new Tv();	// 기본 생성자를 사용한 객체 생성
		Tv tv2 = new Tv(200);	// 매개변수를 사용한 객체 생성
	}
}






================================================================================================


	# 다른 생성자 호출(this)

생성자 오버로딩이 많아질 경우 생성자간의 중복된 코드가 발생할 수 있다.   
매개 변수의 수만 달리하고 필드 초기화 내용이 비슷한 생성자에서 이러한 현상을 많이 볼 수 있다.   
이 경우에는 필드 초기화 내용은 한 생성자에만 집중적으로 작성하고 
나머지 생성자는 초기화 내용을 가지고 있는 생성자를 호출하는 방법으로 개선할 수 있다. 
생성자에서 다른 생성자를 호출할 때에는 다음과 같이 this() 코드를 사용한

	public 클래스명( 매개변수선언，...  )  {
		this.(매개변수 값, 매개변수 값);
		실행문;
	}

this()는 자신의 다른 생성자를 호출하는 코드로 반드시 생성자의 첫줄에서만 허용된다. 
this()의 매개값은 호출되는 생성자의 매개 변수타입에 맞게 제공해야한다. 
this() 다음에는 추가적인 실행문들이 올 수 있다. 
이 말은 호출되는 생성자의 실행이 끝나면 원래 생성자로 돌아와서 다음 실행문을 진행한다는 뜻이다. 
자 그렇다면 다옴 코드를 보면서 생성자 오버로딩에서 생기는 중복 코드를 제거해보자.

public class Car {
	String company = "현대자동차";
	String model;
	String color;
	int maxSpeed;

	Car(String model) {
		this.model = model; 		// 중복 코드
		this.color = "은색"; 		// 중복 코드
		this.maxSpeed = 250 ; 	// 중복 코드
	}
	Car(String model, String color) {
		this.model = model;  	// 중복 코드
		this.color = color; 		// 중복 코드
		this.maxSpeed = 250 ; 	// 중복 코드
	}

	Car(String model, String color , int maxSpeed) { 
		this.model = model;  		// 중복 코드
		this.color = color; 			// 중복 코드
		this.maxSpeed = maxSpeed; 		// 중복 코드
	}
}

앞의 코드를 보면 세 개의 생성자 내용이 비슷하므로 앞에 두 개의 생성자에서 this()를 사용해서
마지막 생성자인 Car(String model , String color, int maxSpeed)를 호출하도록 수정하면 
중복 코드를 최소화할 수 있다.



public class Car {
	//필드
	String company = "현대자동차";
	String model;
	String color;
	int maxSpeed;
	
	//생성자
	Car() {
	}
	
	Car(String model) {			// 매개변수 1개짜리 생성자 내에서 매개변수 3개짜리 생성자를 호출한다.
		this(model, null, 0);		// model 사용, color 사용X(기본값 = null), maxSpeed 사용X(기본값 = 0)
	}
	
	Car(String model, String color) {	// model 사용, color 사용, maxSpeed 사용X (기본값 = 0)
		this(model, color, 0);
	}
	
	Car(String model, String color, int maxSpeed) {
		this.model = model;
		this.color = color;
		this.maxSpeed = maxSpeed;
	}
}



public class CarMain {
	public static void main(String[] args) {
		
		// 기본 생성자를 지원하지 않는다.
		Car car1 = new Car("쏘나타");
		System.out.println("제조사 : " + car1.company);
		System.out.println("모델명 : " + car1.model);
		System.out.println("색상 : " + car1.color);
		System.out.println("최대속도 : " + car1.maxSpeed);
		System.out.println();
		
		Car car2 = new Car("아반떼", "검정색");
		System.out.println("제조사 : " + car2.company);
		System.out.println("모델명 : " + car2.model);
		System.out.println("색상 : " + car2.color);
		System.out.println("최대속도 : " + car2.maxSpeed);
		System.out.println();
		
		Car car3 = new Car("그랜져", "흰색", 280);
		System.out.println("제조사 : " + car3.company);
		System.out.println("모델명 : " + car3.model);
		System.out.println("색상 : " + car3.color);
		System.out.println("최대속도 : " + car3.maxSpeed);
		System.out.println();
	}
}























