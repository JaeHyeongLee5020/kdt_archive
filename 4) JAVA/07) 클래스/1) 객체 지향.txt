			## 객체지향 프로그래밍

-현실 세계에서 어떤 제품을 만들 때 부품을 먼저 개발하고 이 부품들을 하나씩 조립해서 완성된 제품을 만들 듯이， 
 소프트웨어를 개발할 때에도 부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립해서 
-완성된 프로그램을 만드는 기법을 객체 지향 프로그래밍(OOP : Object Oriented Programming) 이라고 한다. 
-객체 지향 프로그래밍을 이해하기 위해서는 우선 객체의 개념과 객체 상호작용에 대해서 알아두어야 한다.


		# 객체란?
-객체(Object)란 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 
 자신의 속성을 가지고 있고 다른 것과 식별 가능한 것을 말한다. 
 예를들어 물리적으로 존재하는 자동차, 자전거, 책, 사람과 
 추상적인 날짜, 학과, 강의, 주문등이 모두 객체가 될 수 있다. 

-객체는 속성과 동작으로 구성되어 있다. 
 예를 들어 사람은 이름, 나이 등의 속성과 웃다, 걷다 등의 동작이 있고
-자동차는 색상, 모델명 등의 속성과 달린다, 멈춤다 등의 동작이 있다.
-자바는 이 속성과 동작들을 각각 필드(field)와 메서드(method) 라고 부른다.

                           

-현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 객체 모델링(Object Modeling)이라고 한다. 
-객체 모델링은 현실 세계 객체의 속성과 동작을 추려내어 
 소프트웨어 객체의 필드와 메서드로 정의하는 과정이라고 볼 수 있다.

-객체는 필드(속성)와 메서드(동작)로 구성된 자바 객체로 모델링 할 수 있다.




==========================================================================================

		# 객체의 상호작용

-현실 세계에서 일어나는 모든 현상은 객체와 객체 간의 상호작용으로 이루어져 있다. 
 예를 들어 사람은 전자계산기의 기능을 이용하고, 전자계산기는 계산 결과를 사람에게 알려주는 상호작용을 한다.
                               
                               

-소프트웨어에서도 마찬가지이다. 객체들은 각각 독립적으로 존재하고, 다른 객체와 서로 상호작용 하면서 동작한다.   
-객체들 사이의 상호작용 수단은 메서드이다.   
-객체가 다른 객체의 기능을 이용하는 것이 바로 메서드 호출이다
                               

-메서드 호출은 다음과 같은 형태를 가지고 있다.   
-객체에 도트(.) 연산자를 붙이고 메서드 이름을 기술하면 된다.   
-도트 연산자는 객체의 필드와 메서드에 접근할 때 사용한다.

-매개값은 메서드를 실행하기 위해 펼요한 데이터이다.   
-예를 들어 10과 20을 주고 더하기 기능을 이용한다라고 했을때 10과 20이 더하기 기능의 매개값이다.    
-리턴값은 메서드가 실행하고 나서 호출한 곳으로 돌려주는(리턴하는) 값이다. 

                         

	Example
	int result = Calculator.add(10, 20);	// 10, 20이 매개 변수가된다.

-객체의 상호작용은 객체간의 메서드 호출을 의미하며 매개값과 리턴값을 통해서 데이터를 주고 받는다.


==========================================================================================

		# 객체 간의 관계 

객체는 개별적으로 사용될 수 있지만, 대부분 다른 객체와 관계를 맺고 있다. 
이 관계의 종류에는 집합 관계, 사용 관계, 상속 관계가 있다. 
 # 집합 관계 : 완성품과 부품의 관계 ( 자동차 객체 --- 엔진 객체, 타이어 객체, 핸들 객체)
 # 사용 관계 : 객체가 다른 객체를 사용하는 관계 (사람  ---  계산기)
 # 상속 관계 : 종류 객체와 구체적인 사물 객체 관계

-집합 관계에 있는 객체는 하나는 부품이고 하나는 완성품에 해당한다. 
-예를 들어 자동차는 엔진, 타이어, 핸들 등으로 구성되므로 자동차와 이 부품들은 집합의 관계라고 볼 수 있다.

                     

-사용 관계는 객체 간의 상호작용을 말한다. 

-객체는 다른 객체의 메서드를 호출하여 원하는 결과를 얻어낸다. 
-예를들어 사람은 자동차를 사용하므 로사람과 자동차는 사용의 관계라고 볼 수 있다. 
-사람은 자동차를 사용할 때 달린다, 멈춘다 등의 메서드를 호출한다.

-상속 관계는 상위 (부모) 객체를 기반으로 하위 (자식) 객체를 생성하는 관계를 말한다 
-일반적으로 상위 객체는 종류를 의미하고, 하위 객체는 구체적인 사물에 해당한다.   
-예를 들어 "자동차는 기계의 종류이다."에서 기계(상위)와 자동차(하위)는 상속관계에 있다고 볼 수 있다.

-객체 지향 프로그래밍 (OOP: Object Oriented Programming)은 만들고자 하는 완성품인 객체를 모델링하고, 
-집합 관계에 있는 부품 객체와 사용 관계에 있는 객체를 
 하나씩 설계한 후 조립하는 방식으로 프로그램을 개발하는 기법이다.


==========================================================================================

		# 객체 지향 프로그래밍의 특징

-객체 지향 프로그램의 특정으로는 캡슐화, 상속, 다형성을 들 수 있다. 
-이들의 특정은 자바 언어를 학습하면서 자연스럽게 알게 되는데 여기서는 이 특정들의 개념만 간단히 살펴보기로 하자.


	# 캡슐화(Encapsulation)
-캡슐회란 객체의 필드, 메서드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말한다. 
외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메서드만 이용할 수 있다.
                             
-필드와 메서드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다. 
-예를 들어 TV의 중요한 부품이 바깥으로 노출되어 있다면, 사용자의 실수로 인해고장날 수도 있다. 
-이런 중요한 부품은 TV 안쪽으로 캡슐화하여 숨겨두어야 한다.     
-자바는 캡슐화된 멤버를 노출시킬 것인지, 숨길 것인지를 결정하기 위해 접근 제한자(Access Modifier)를 사용한다.
-접근 제한지는 객체의 필드와 메서드의 사용 범위를 제한함으로써 외부로부터 보호한다.


	# 상속(Inheritance)

-일반적으로 상속은 부모가 가지고 있는 재산을 자식에게 물려주는 것을 말한다. 
-자식은 특별한 노력 없이 부모가 물려준 재산을 갖게 된다. 
-객체 지향 프로그래밍에서도 부모 역할의 상위객체와 자식역할의 하위객체가 있다. 
-상위 객체는 자기가 가지고 있는 필드와 메서드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 해준다.
-상속 대상 : Field , Method
                             
# 상속의 효과
1) 상속은 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 
  이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들기 때문에 2) 반복된 코드의 중복을 줄여준다. 

  예를 들어 필드1, 필드2, 메서드1, 메서드2를 가지는 객체를 설계한다고 생각해보자.   
  4개를 모두 처음부터 설계하는 것보다는 이미 필드1과 메서드1이 있는 객체가 있다면, 
  이것을 상속하고, 필드2와 메서드2만 설계하는 것이 보다 효율적이고 개발 시간을 절약시켜준다.  
3) 상속은 상위 개체의 수정으로 모든 하위 객체들의 수정 효과를 가져오므로 유지/보수 시간을 최소화시켜주기도 한다. 
  예를 들어 객체 B, C가 객체 A를 상속할 경우 A의 필드와 메서드를 수정함으로써 
  객체 B. C를 수정하지 않아도 객체 A의 수정된 필드와 메서드를 사용할 수 있다.

4) 객체의 다형성을 구성할 수 있다.


	# 다형성(Polymorphism)

-같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 
   # 부모 타입에는 모든 자식 객체가 대입될 수 있다.
   # 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.

-효과
   # 객체를 부품화 시킬 수 있다.
   # 유지 보수가 용이하다.

-코드 측면에서 보면 다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
-자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다. 
-부모 타입에는 모든 자식 객체가 대입될 수 있고 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다. 
-다형성의 효과로 객체는 부품화가가능하다. 
-예를들어 자동차를 설계할 때 타이어 인터페이스 타입을 적용했다면 
  이 인터페이스를 구현한 실제 타이어들은 어떤 것이든 상관없이 장착(대입) 이 가능하다.
                               








