				## Getter, Setter
  
-일반적으로 객체 지향 프로그래밍에서 객체의 데이터는 객체 외부에서 직접적으로 접근하는 것을 막는다.
-그 이유는 객체의 데이터를 외부에서 마음대로 읽고 변경할 경우 
 객체의 무결성 (결점이 없는 성질)이 깨어질 수 있기 때문이다. 
 예를 들어 지동차의 속도는 음수가 될 수 없는데, 외부에서 음수로 변경하면 객체의 무결성이 깨진다. 
-실제로 다음 코드는 Car 객체의 speed 필드값을 -100으로 변경시킨다.


	myCar.speed  =  -100;


이러한 문제점을 해결하기 위해 객체 지향 프로그래밍에서는 메소드를 통해서 데이터를 변경하는 방법을 선호한다. 
데이터는 외부에서 접근할 수 없도록 막고 메소드는 공개해서 외부에서 메소드를 통해 데이터에 접근하도록 유도한다. 
그 이유는 메소드는 매개값을 검증해서 유효한 값만 데이터로 저장할 수 있기 때문이다. 
이러한 역할을 하는 메소드가 Setter이다. 
예를 틀어 자동차의 속도를 setSpeed() 메소드로 변경할 경우 다음과 같이 검증 코드를 작성할 수 있다.

	void setSpeed(double speed)  { 
		if(speed < 0) {
			this .speed = 0;   // 매개값이 음수일 경우 speed필드에 0으로 저장 후 메서드 종료
			return;
		} else {
			this.speed = speed;
		}
	}


-외부에서 객체의 데이터를 읽을 때도 메소드를 사용하는 것이 좋다. 
-객체 외부에서 객체의 필드값을 사용하기에 부적절한 경우도 있다. 
-이런 경우에는 메소드로 필드값을 가공한 후 외부로 전달하면 된다. 
-이런 메소드가 바로 Getter이다. 예를 들어 자동차의 속도를 마일에서 km 단위로 환산해서 
  외부로 리턴해주는 getSpeed() 메소드를 다음과 같이 작성할 수 있다.

	double getSpeed() {
		double km = speed*1 .6;	// 필드의 값에 1.6을 곱해서 마일을 km로 변경후 리턴
		return km;
	}


클래스를 선언할 때 가능하다면 필드를 private로 선언해서 외부로부터 보호하고, 
필드에 대한 Setter와 Getter 메소드를 작성해서 필드값을 안전하게 변경 및 사용하는 것이 좋다. 



-다음은 Setter와 Getter 메소드를 선언하는 방법을 보여준다. 검증 코드나 변환코드는 필요에 따라 추가해야 한다.

	private 타입 fieldName; 			// 필드 접근 제한자 private

	public 리턴타입 getFieldName() {		// get메서드 접근 제한자 public
		실행문;
		return fieldName;
	}

	public 리턴타입 setFieldName(매개변수) {	// set메서드 접근 제한자 public
		실행문;
		this.fieldName = 매개변수;
	}



-필드 타입이 boolean일 경우에는 Getter는 get으로 시작하지 않고 is로 시작하는 것이 관례이다.
-예를 들어 stop 필드의 Getter와 Setter는 다음과 같이 작성할 수 있다.

	private 타입 stop; 			// 필드 접근 제한자 private

	public 리턴타입 isStop() {		// is메서드 접근 제한자 public
		실행문;
		return stop;
	}

	public 리턴타입 setStop(매개변수) {	// set메서드 접근 제한자 public
		실행문;
		this.stop;  = 매개변수;
	}


-만약 외부에서 필드값을 읽을 수만 있고 변경하지 못하도록 하려면(읽기 전용) Getter 메소드만 선 언해도 좋고,
  아니면 Setter 메소드를 private 접근 제한을 갖도록 선언해도 좋다.
-이클립스는 클래스에 선언된 필드에 대해 자동적으로 Getter와 Setter 메소드를 생성시키는 기능이 있다. 





	
-getter , setter 메서드를 생성한 후 아래의 조건대로 구성해야한다.
-시간은 0 ~ 23시까지만 입력이 가능해야 한다.
-분은 0 ~ 59분 까지만 입력이 가능해야 한다.
-초는 0 ~ 59분 까지만 입력이 가능해야 한다.
	

public class Time {

	private int hour;
	private int minite;
	private int second;

	
	public int getHour() {
		return this.hour;
	}
	public void setHour(int hour) {
		if(hour >= 0 && hour <= 23) {
			this.hour = hour;
		}
	}
	
	public int getMinite() {
		return minite;
	}
	public void setMinite(int minite) {
		if(minite >= 0 && minite <= 59) {
			this.minite = minite;
		}
	}
	
	public int getSecond() {
		return second;
	}
	public void setSecond(int second) {
		if(second >= 0 && second <= 59) {
			this.second = second;
		}
	}
	public void nowTime() {
		System.out.println("현재 시간은 " + hour + "시 " + minite + "분 " + second + "초 입니다.");
	}
}






-BankAccount 클래스를 생성
-balance(잔액) 필드를 생성
-setBalance()(최초 현재 잔액 설정)은 0 이상만 허용하며, getBalance()로 잔액을 반환해야 한다.
-deposit()(입금)과 withdraw()(출금) 메서드를 만들어 입/출금 기능을 추가
-출금 시 잔액 부족하면 "잔액 부족" 메시지를 출력되며 출금되지 않아야 한다.


public class BankAccount {

	private double balance;	// 은행 잔고
	
	
	public double getBalance() {
		return this.balance;
	}
	
	public void setBalance(double balance) {
		if(balance > 0) {
			this.balance = balance;
		}
	}
	
	// 입금
	public void diposit(double amount) {
		if(amount > 0) {
			this.balance += amount;
			System.out.println("입금후 잔액 : " + this.balance + "원");
		}
	}
	
	// 출금
	public void withdraw(double amount) {
		if(amount > this.balance) {
			System.out.println("잔액이 부족합니다.");
		} else {
			this.balance -= amount;
			System.out.println("출금후 잔액 : " + this.balance + "원");
		}
	}
}




public class BankAccountMain {
	public static void main(String[] args) {
		
		
		BankAccount ba = new BankAccount();
		
		ba.setBalance(1000);
		System.out.println("잔고 : " + ba.getBalance() + "원");
		
		ba.diposit(500);
		ba.withdraw(2000);
		ba.withdraw(1000);
	}
}










1) RemoteController 클래스와 RemoteControllerMain 클래스를 생성

2) RemoteController 클래스에서는 객체를  직접 생성할 수 없으며 하나의 객체 리턴받아 사용할 수 있어야 한다.

3) 외부에서 RemoteController 클래스의 필드로 직접 접속할 수 없으며 메서드를 사용해서면 필드값을 변경할 수 있어야 한다.

(채널이 하나씩 올라가는 기능 , 채널이 하나씩 내려가는 기능 , 채널을 직접 입력하는 기능)
4-1) 채널은 1 ~ 100까지만 변경이 가능하며 100이상 채널을 변경하면 1부터 시작되어야 한다.
4-2) 채널은 1 ~ 100까지만 변경이 가능하며 1이하로 채널을 변경하면 100부터 시작되어야 한다.
4-3) 채널 직접 입력은 1 ~ 100까지만 변경이 가능하며 해당 범위가 아닌경우 "입력하신 X 번은 없는 채널입니다."가 출력되어야 한다.

(볼륨이 하나씩 올라가는 기능 , 볼륨이 하나씩 내려가는 기능)
5-1) 볼륨은 0 ~ 50까지만 조절이 가능하며 0이하로 내려갈 수 없으며 50이상 올라갈 수 없어야 한다.
5-2) 음소거를 누르면 볼륨이 한번에 0으로 변경되어야 하며 음소거를 해제하면 음소거를 해제하기전의 볼륨으로 변경되어야 한다.

6) show() 메서드를 호출하면 전원 on/off상황 , 음소거 on/off상황, 현재 볼륨, 현재 채널 정보를 한번에 확인 가능해야 한다.



public class RemoteController {
	private static RemoteController remocon = new RemoteController();
	
	// 생성자를 private로 변경하여 생성자 호출 차단
	private RemoteController() {
	}
	
	static RemoteController getInstance() {
		return remocon;
	}
	
	// 필드
	private boolean power;	// 전원
	private int channel=3;	// 채널
	private int volume=15;		// 볼륨
	private boolean mute;	// 음소거
	private int volumeSave;
	
	public void setChannel(int channel) {
		if(channel > 0 && channel <= 100) {
			this.channel = channel;
		} else {
			System.out.println("입력하신 X 번은 없는 채널입니다.");
		}
		
	}
	public int getChannel() {
		System.out.println("현재 채널 : " + channel);
		return channel;
	}
	
	public void channelUp() {
		if(channel > 0 && channel < 100) {
			channel++;
			System.out.println("현재 채널 : " + channel);
		} else {
			channel = 1;
			System.out.println("현재 채널 : " + channel);
		}
	}
	
	public void channelDown() {
		if(channel > 1 && channel <= 100) {
			channel--;
			System.out.println("현재 채널 : " + channel);
		} else {
			channel = 100;
			System.out.println("현재 채널 : " + channel);
		}
	}
	
	public void power() {
		power = !power;
		if(power) {
			System.out.println("전원이 켜졌습니다.");
		} else {
			System.out.println("전원이 꺼졌습니다.");
		}
	}
	
	public void volumeUp() {
		if(volume >= 0 && volume < 50) {
			volume++;
			System.out.println("현재 볼륨 : " + this.volume);
		} else {
			volume = 50;
			System.out.println("현재 볼륨 : " + this.volume);
		}
	}
	
	public void volumeDown() {
		if(volume > 0 && volume <= 50) {
			volume--;
			System.out.println("현재 볼륨 : " + this.volume);
		} else {
			volume = 0;
			System.out.println("현재 볼륨 : " + this.volume);
		}
	}
	
	public void mute() {
		mute = !mute;
		if(mute) {
			volumeSave = volume;
			volume = 0;
			System.out.println("볼륨 : " + this.volume + "(음소거)");
		} else {
			volume = volumeSave;
			System.out.println("볼륨 : " + this.volume);
		}
	}
}



package test.chapter07.example11;
public class RemoteControllerMain {
	public static void main(String[] args) {
		
//		RemoteController rc = new RemoteController();
		
		RemoteController rc = RemoteController.getInstance();
		
//		rc.setChannel(110);
//		rc.getChannel();
		
//		rc.channelUp();
//		rc.channelUp();
//		rc.channelUp();
//		rc.channelUp();
//		rc.channelUp();
		
//		rc.channelDown();
//		rc.channelDown();
//		rc.channelDown();
//		rc.channelDown();
//		rc.channelDown();
		
//		rc.power();
//		rc.power();
//		rc.power();
		
//		rc.volumeUp();
//		rc.volumeUp();
//		rc.volumeUp();
//		rc.volumeUp();
		
//		rc.volumeDown();
//		rc.volumeDown();
//		rc.volumeDown();
//		rc.volumeDown();
		
		rc.mute();
		rc.mute();
		rc.mute();
		rc.mute();
		rc.mute();
	}
}
























