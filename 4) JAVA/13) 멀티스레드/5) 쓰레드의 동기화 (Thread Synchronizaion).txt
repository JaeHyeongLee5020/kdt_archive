			## 쓰레드의 동기화 (Thread Synchronizaion)

-프로세스는 자원과 데이터, 스레드로 구성되어 있다. 
 따라서 프로세스는 스레드가 운영체제로부터 자원을 할당받아 소스 코드를 실행하여 데이터를 처리한다.

-만약, 싱글 스레드 프로세스라면, 공유 데이터에 단 하나의 스레드만이 접근하므로 문제가 될 것이 없다. 
  하지만, 멀티 스레드 프로세스의 경우, 두 개 이상의 스레드가 공유 데이터에 동시에 접근하게 되면 
  예상과 벗어난 결과가 타나날 수 있다. 
  이러한 문제를 해결해 주는 것이 바로 스레드 동기화다.

-쓰레드A를 사용하던 객체가 쓰레드B에 의해 상태가 변경될 수 있기 때문에 
  쓰레드A가 의도했던 것과는 다른 결과 를 산출할 수도 있다. 
  이는 마치 여러 사람이 계산기를 함께 나눠 쓰는 상황과 같아서 사람A가 계산기로 작업을 하다가 
  계산 결과를 모리에 장한 뒤 잠시 자리를 비웠을 때 사람B가 계산기를 만 져서 
  앞 사람이 메모리에 저장한 값을 다른 값으로 변경하는 것과 같다.

-쓰레드 동기화란 여러 쓰레드가 동일한 리소스를 공유하여 사용하게 되면 서로의 결과에 영향을 주기 때문에 
  이러한 일을 방지하기 위해 한 쓰레드가 진행중인 작업을 
  다른 쓰레드가 간섭하지 못하도록 막는 것을 '쓰레드 동기화(Synchronization)'라고 한다.

-User1 쓰레드가 Calculator 객체의 memory 필드에 100을 먼저 저장하고 2초간 일시 정지 상태 가 된다. 
  그동안에 User2 스레드가 memory 필드값을 50으로 변경한다. 
  2초가 지나 User1 스레드가 다시 실행 가 되어 memory 필드의 값을 출력하면 User2가 저장한 50이 나온다 

	스레드 동기화 : 한 스레드가 진행중인 작업을 다른 스레드가 간섭하지 못하도록 막는것

-쓰레드 동기화를 하기 위해서는 임계영역(critical section)과 락(lock)을 사용한다.
-임계영역으로 설정한 구역은 동시에 리소스를 사용할 수 없는 구역이고,
  락(lock)을 획득한 쓰레드에 대해서만 리소스를 사용하도록 하는 방식입니다.

1) 메서드 앞에 synchronized를 붙여서 메서드 전체가 임계 영역으로 설정된다.
쓰레드는 해당 메서드가 호출된 시점부터 해당 메서드가 포함된 객체의 lock을 얻어 
작업을 수행하다가 메서드가 종료되면 lock을 반환한다.

	스레드 동기화 : 한 스레드가 진행중인 작업을 다른 스레드가 간섭하지 못하도록 막는것

2) 메서드 내의 코드 일부를 블럭{}으로 감싸고 블럭 앞에 'synchronized(참조변수)'를 붙이는 것이다.
이때 참조변수는 락을 걸고자 하는 객체를 참조하는 것이어야 한다.
이 블럭을 synchronized 블럭이라고 부르며, 쓰레드가 이 블럭 영역 안으로 들어가면 
객체의 lock을 얻게 되고, 블럭을 벗어나면 반납한다.

모든 객체는 lock을 하나씩 가지고 있으며, 해당 객체의 lock을 가지고 있는 쓰레드만 
임계 영역의 코드를 수행할 수 있다. 다른 쓰레드들은 lock을 얻을 때까지 기다린다.




public class Calculator {
	private int memory;	// 필드(공용 자원)
	
	public int getMemory() {	// getter() : 메모리값을 받는용도
		return this.memory;
	}
	
	public synchronized void setMemory(int memory) {	// setter() : 메모리 값을 설정
		this.memory = memory;
		
		try {
			Thread.sleep(2000);	// 1000/1초 단위로 쓰레드를 중지
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		// 실행중인 쓰레드의 이름과 메모리 값을 출력
		System.out.println(Thread.currentThread().getName() + " : " + this.memory);
	}
}



public class User1Thread extends Thread {

	// 공용 자원을 사용하기위한 참조변수 생성
		Calculator calculator = new Calculator();
		
		public void setCalculator(Calculator calculator) {
			this.calculator = calculator;
			setName("User1-Thread");
		}	
		
		@Override
		public void run() {
			calculator.setMemory(100);
		}
}



public class User2Thread extends Thread {
	
	// 공용 자원을 사용하기위한 참조변수 생성
	Calculator calculator = new Calculator();
	
	public void setCalculator(Calculator calculator) {
		this.calculator = calculator;
		setName("User2-Thread");
	}
	
	@Override
	public void run() {
		calculator.setMemory(50);
	}
}




public class CalculatorMain {
	public static void main(String[] args) {
		
		Calculator cal = new Calculator();
		
		User1Thread user1 = new User1Thread();
		User2Thread user2 = new User2Thread();
		
		user1.setCalculator(cal);
		user1.start();
		
		user2.setCalculator(cal);
		user2.start();
	}
}


User1-Thread : 100
User2-Thread : 50







		------------------------------------------------------------------------------

public class Printer {
	public synchronized void print(String message) {
		
		for(int i = 0; i < 3; i++) {
			System.out.println(message);
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}
		}
	}
}



public class Printermain {
	public static void main(String[] args) {
		
		Printer printer = new Printer();
		
		// 익명 구현 객체 1
		Thread thread1 = new Thread(new Runnable() {

			@Override
			public void run() {
				printer.print("Thread-1이 호출");
			}
		});
		// 익명 구현 객체 2
		Thread thread2 = new Thread(new Runnable() {

			@Override
			public void run() {
				printer.print("Thread-2가 호출");
			}
		});
		// 익명 구현 객체 3
		Thread thread3 = new Thread(new Runnable() {

			@Override
			public void run() {
				printer.print("Thread-3이 호출");
			}
		});
		thread1.start();
		thread2.start();
		thread3.start();
	}
}


Thread-2가 호출
Thread-2가 호출
Thread-2가 호출
Thread-3이 호출
Thread-3이 호출
Thread-3이 호출
Thread-1이 호출
Thread-1이 호출
Thread-1이 호출






		------------------------------------------------------------------------------



package test.chapter12.example04;
public class Account {
	
	// 통장 잔고
	private int balance;
	
	public Account() {
		this.balance = 1000;
	}
	
	public int getBalance() {
		return this.balance;
	}
	
	// 출금
	public synchronized void withdraw(int money) {
		if(balance >= money) {	// 출금 금액보다 잔고가 클때만 출금 가능
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			this.balance -= money;	// 잔고에서 출금
		} else {
			System.out.println("잔고가 부족합니다.");
		}
	}
}





package test.chapter12.example04;
public class CustomerThread implements Runnable {
	
	// 고객
	Account account = new Account();
	
	// 출금하는 메서드(출금 금액 = 100, 200, 300중 랜덤)
	@Override
	public void run() {
		
		while(account.getBalance() > 0) {
			int money = (int)(Math.random() * 3 + 1) * 100;
			
			account.withdraw(money);
			System.out.println(Thread.currentThread().getName() + "출금 : " + money + ", 잔고 = " + account.getBalance());
		}
		
	}
}



package test.chapter12.example04;
public class AccountSyncMain {
	public static void main(String[] args) {
		
		Runnable runnable = new CustomerThread();
		Thread customer1 = new Thread(runnable);
		Thread customer2 = new Thread(runnable);
		
		customer1.start();
		customer2.start();
	}
}



     # synchronized 미설정
Thread-0출금 : 300, 잔고 = 500
Thread-1출금 : 200, 잔고 = 500
Thread-0출금 : 200, 잔고 = 300
Thread-1출금 : 200, 잔고 = 300
Thread-0출금 : 100, 잔고 = -100
Thread-1출금 : 300, 잔고 = -100


     # synchronized 설정
Thread-0출금 : 100, 잔고 = 900
Thread-1출금 : 200, 잔고 = 700
Thread-0출금 : 300, 잔고 = 400
Thread-1출금 : 300, 잔고 = 100
Thread-0출금 : 100, 잔고 = 0
잔고가 부족합니다.
Thread-1출금 : 100, 잔고 = 0








