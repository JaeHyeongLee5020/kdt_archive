		## 쓰레드 상태
 
-쓰레드 객체를 생성하고 start() 메소드를 호출하면 곧바로 쓰레드가 실행되는 것처럼 보이지만 사실은 실행 대기 상태가 된다. 
-실행 대기 상태란 아직 스케줄링이 되지 않아서 실행을 기다리고 있는 상태를 말한다. 
-실행 대기 상태에 있는 쓰레드 중에서 쓰레드 스케줄링으로 선택된 쓰레드가 
 비로소 CPU를 점유하고 run() 메소드를 실행한다. 이때를 실행 (Running) 상태라고 한다. 
-실행 상태의 쓰레드는 run() 메소드의 모든 코드 실행하기 전에 쓰레드 스케줄링에 의해 다시 실행 대기 상태로 돌아 갈 수 있다. 
 그리고 실행 대기 상태에 있는 다른 쓰레드가 선택되어 실행 상태가 된다. 
 이렇게 쓰레드는 실행 대기 상태와 실행 상태를 번갈아 가면서 자신의 run() 메소드를 조금씩 실행한다. 
-실행 상태에서 run() 메소드가 종료되면, 더 이상 실행할 코드가 없기 때문에 쓰레드의 실행은 멈추게 된다. 
-이 상태를 종료(TERMINATED) 상태라고 한다.
-경우에 따라서 쓰레드는 실행 상태에서 실행 대기 상태로 가지 않을 수도 있다. 
-실행 상태에서 일시 정지 상태로 가기도 하는데, 일시 정지 상태는 쓰레드가 실행할 수 없는 상태이다.   
-일시 정지 상태는 WAITING, TIMED_WAITING, BLOCKED가 있다.
-쓰레드가 다시 실행 상태로 가기 위해서는 일시 정지 상태에서 실행 대기 상태로 가야한다는 것만 알아두자.
                          
-쓰레드의 상태를 코드에서 확인할 수 있도록 하기 위해 자바 5부터 Thread 클래스에 getState() 메소드가 추가되었다. 

=================================================================================
          상태	|				설명				|
=================================================================================
   NEW		|  쓰레드가 생성되고 아직 start()가 호출되지 않은 상태				|
---------------------------------------------------------------------------------
   RUNNABLE	|  실행 중 또는 실행 가능 상태						|
---------------------------------------------------------------------------------
   BLOCKED	|  동기화 블록에 의해서 일시 정지된 상태(block이 풀릴 때까지 기다리는 상태)	|
---------------------------------------------------------------------------------
   WATING	|  쓰레드가 특정 이벤트 또는 다른 쓰레드의 작업을 기다리는 상태를 의미		|
		|  즉, 스레드가 다른 스레드가 특정 작업을 완료할 때까지 대기하는 경우 발생		|
---------------------------------------------------------------------------------
   TIME_WAITING	|  TIME_WAITING은 일시 정지 시간이 지정된 경우를 의미			|
---------------------------------------------------------------------------------
   TERMINATED	|  쓰레드의 작업이 종료된 상태						|
=================================================================================


public class TargetThread extends Thread {
	
	@Override
	public void run() {
		System.out.println("상태2) : " + getState());
		
		for(int i = 0; i < 1000000000L; i++) {
			
		}
		
		try {	// TIME_WATING 상태확인을 위한 sleep() 메소드 호출
			Thread.sleep(2000);
		} catch (InterruptedException e) {
		}
	}
}




public class TartgetMain {
	public static void main(String[] args) {
		// NEW 			: 쓰레드가 생성되고 아직 start()가 호출되지 않은 상태
		// RUNNABLE		: 실행 중 또는 실행 가능 상태
		// TIME_WAITING	: TIME_WAITING은 일시 정지 시간이 지정된 상태
		Thread thread = new TargetThread();
		
		System.out.println("상태1) : " + thread.getState());
		
		thread.start();
		
		try {
			Thread.sleep(500);
			System.out.println("상태3) : " + thread.getState());
			thread.join();	// thread의 종료까지 기다린다.
		} catch (InterruptedException e) {
		}
		System.out.println("상태4) : " + thread.getState());
	}
}



상태1) : NEW
상태2) : RUNNABLE
상태3) : TIMED_WAITING
상태4) : TERMINATED




====================================================================================================

			##  스레드 상태 제어 

-사용자는 미디어 플레이어에서 동영상을 보다가 일시 정지시킬 수도 있고, 종료시킬 수도 있다. 
-일시 정지는 조금 후 다시 동영상을 보겠다는 의미이므로 
  미디어 플레이어는 동영상 스레드를 일시 정지 상태로 만들어야 한다. 
  그리고 종료는 더 이상 동영상을 보지 않겠다는 의미이므로 미디어 플레이어는 스레드를 종료 상태로 만들어야 한다. 
-이와 같이 실행 중인 스레드의 상태를 변경하는 것을 스레드 상태 제어라고 한다. 
-멀티 스레드 프로그램을 만들기 위해서는 정교한 스레드 상태 제어가 필요한데, 
 상태 제어가 잘못되면 프로그램은 불안정해져서 먹통이 되거나 다운된다. 
-스레드 제어를 제대로 하기 위해서는 스레드의 상태 변회를 가져오는 메소드들을 파악하고 있어야 한다. 

		
=================================================================================================
	메소드			|  				설명				|
=================================================================================================
 static void sleep(long milliS)		| 지정된 시간(1000/1초)동안 쓰레드를 일시 정지 시킨다. 			|
 static void sleep(long milliS, int nano)	| 지정한 시간이 지나고 나면 자동적으로 다시 실행 대기상태가 된다.		|
-------------------------------------------------------------------------------------------------
 void join()			|  지정된 시간동안 쓰레드가 실행되도록 한다. 지정된 시간이 지나거나		|
 void join(long milliS)		|  작업이 종료되면 join을 호출한 쓰레드로 다시 돌아와 실행을 계속한다.		|
 void join(long milliS, int nano)		|
-------------------------------------------------------------------------------------------------
   				|  sleep()이나 join()에 의해 일시 정지 상태인 쓰레드를 깨워서 실행대기 		|
 void interrupt()			|  실행 대기 상태로 만든다. 해당 쓰레드에서는 				|
   				|  Interrupted Exception이 발생함으로써 일시 정지 상태를 벗어나게 된다.		|
-------------------------------------------------------------------------------------------------
 void stop()			|  쓰레드를 즉시 종료 시킨다.						|
-------------------------------------------------------------------------------------------------
 void resume()			| 스레드를 일시 정지 상태로 만든다 resume( ) 메소드를 호출하면 다시		|
				| 실행 대기 상태가 된다 - Deprecated (대신 wait()사용) 			|
-------------------------------------------------------------------------------------------------
 void suspend()			| suspend()에 의해 일시 정지 상태에 있는 쓰레드를 실행대기 상태로 만든다.		|
-------------------------------------------------------------------------------------------------
 static void yield()			| 실행중에 자신에게 주어진 실행시간을 다른 쓰레드에게 양보하고			|
				| 자신은 실행 대기상태가 된다.						|
   				|  sleep()이나 join()에 의해 일시 정지 상태인 쓰레드를 깨워서 실행대기 		|
-------------------------------------------------------------------------------------------------
 notify()				|  동기화 블록 내에서 wait() 메소드에 의해 일시 정치 상태에 있는 스레드를 		|
 notifyAll() 			|  실행 대기 상태로 만든다. 						|
-------------------------------------------------------------------------------------------------
 wait() 				|  동기화 블록 내에서 스레드를 일시 정지 상태로 만든다.			|
 wait(long millis) 			|  매개값으로 주어진 시간이 지나면 자동적으로 실행 대기 상태가 된다.		|
 wait(long  millis, int nanos)		| 시간이 주어지지 않으면  notify(), notifyAll() 메소드에 의해 			|
				| 실행 대기 상태로 갈 수 있다.						|
=================================================================================================

-위 표에서 wait(), notify(), notifyAll()은 Object 래스의 메소드이고, 
 그 이외의 메소드는 모두 Thread 클래스의 메소드들이다. 

-wait(), notify(), notifyAll() 메소드의 사용 방법은 스레드의 동기화에서 자세히 설명하기로 하고, 
 이번 에서는 Thread 클래스의 메소드들만 살펴본다.

-static이 붙은 sleep()과 yield()는 자기 자신에게만 적용할 수 있다.






====================================================================================================


	# 주어진 시간동안 일시 정지( sleep() )

-실행 중인 쓰레드를 일정 시간 멈추게 하고 싶다면 Thread 클래스의 정적 메소드인 sleep()을 사용하면 된다. 
-다음과 같이 Thread.sleep() 메소드를 호출한 쓰레드는 주어진 시간동안 일시 정지상태가 되고,
 주어진 시간이 지나게되면 다시 실행 대기 상태로 돌아간다.

-매개값에는 얼마동안 일시 정지 상태로 있을 것인지 밀리세컨드(1/1000) 단위로 시간을 주면 된다.
-위와 같이 1000이라는 값을 주면 쓰레드는 1초가 경과할 동안 일시 정지 상태로 있게 된다. 
-일시 정지 상태에서 주어진 시간이 되기 전에 interrupt() 메소드가 호출되면 
 InterruptedException이 발생하기 때문에 예외 처리가 필요하다. 
-예외를 발생시켜 sleep() , yield()를 깨우는 기능이므로 예외 처리시 catch에서는 아무런 설정을 하지 않아도 된다.
-sleep() 사용시 매번 예외처리가 불편하다면 메서드로 만들어서 호출하여 사용할 수 도 있다.

Example)

	try {
		Thread.sleep(5000);
	} catch (InterruptedException e) {
		e.printStackTrace();
	}


sleep() 사용시 매번 예외처리가 불편하다면 메서드로 만들어서 호출하여 사용할 수 도 있다.

	public void delay(long millis) {
		try {
			Thread.sleep(millis);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}


-sleep()은 자기 자신에게만 적용할 수 있으며 시간이 종료되거나 interrupt() 메소드가 호출되면 실행대기상태가 된다.



public class SleepThreadA extends Thread {
	
	public SleepThreadA() {
		setName("ThreadA");
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.print("*");
		}
		SleepMain.delay(2000);
		System.out.println(getName() + " 쓰레드 종료");
	}
}




public class SleepThreadB extends Thread {

	public SleepThreadB() {
		setName("ThreadB");
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.print("#");
		}
		System.out.println(getName() + " 쓰레드 종료");
	}
}




package test.chapter12.example04;
public class SleepMain {
	
	public static void delay(int mills) {
		try {
			Thread.sleep(mills);
		} catch (InterruptedException e) {
		}
	}
	
	public static void main(String[] args) {
		
		Thread threadA = new SleepThreadA();
		Thread threadB = new SleepThreadB();
		Thread mainThread = Thread.currentThread();
		threadA.start();
		threadB.start();
		
//		try {
//			Thread.sleep(2000);
//			Thread.sleep(2000);
//		} catch (InterruptedException e) {		
//			
//		}

		System.out.println(mainThread.getName() +  " 쓰레드 종료");
	}
}
}
}


*********########***********#################****************###********##########********######********########*******###########********#########*********############*********###########**********#######*********########*******##########**************#########main 쓰레드 종료
******###############*******#######**************############*********#########***********#############************#########*********#########*******########*****########***********#######********########******************########******************########***#########*********#########********################*********#######***#########ThreadB 쓰레드 종료
ThreadA 쓰레드 종료


# sleep() 메서드를 static 메서드로 만든 후 호출하여 사용해야 한다.
# main 쓰레드를 sleep시키려면 main 메서드에서 delay()를 호출하고
  SleepA 클래스나 SleepB 클래스의 쓰레드를 sleep시키려면 해당 클래스에서 호출하면 된다.









====================================================================================================

	# 다른 쓰레드에게 실행 양보( yield() )

-쓰레드가 처리하는 작업은 반복적인 실행을 위해 for문이나 while문을 포함히는 경우가 많다. 
-가끔은 이 반복문들이 무의미한 반복을 하는 경우가 있다.


	public void run () { 
		while(true) {
			if(work) {
				System.out.println("ThreadA  작업 내용");
			}
		}
	}


쓰레드가 시작되어 run()  메소드를 실행하면 while(true) { } 블록을 무한 반복 실행한다.
만약 work의 값이 false라면 그리고 work의 값이 false에서 true로 변경되는 시점이 불명확하다면,
while문은 어떠한 실행문도 실행하지 않고 무의미한 반복을 한다.
이것보다는 다른 쓰레드에게 실행을 양보하고 자신은 실행 대기 상태로 가는 것이 전체 프로그램 성능에 도움이 된다. 
이런 기능을 위해서 쓰레드는 yield() 메소드를 제공하고 있다. 
yield() 메소드를 호출한 쓰레드는 실행 대기 상태로 돌아가고 동일한 우선순위 또는 
높은 우선순위를 갖는 다른 쓰레드가 실행 기회를 가질 수 있도록 해준다.


	public void run () { 
		while(true) {
			if(work) {
				System.out.println("ThreadA-작업 내용");
			} else {
				Thread.yield();
			}
		}
	}



package test.chapter12.example04;
public class ThreadA extends Thread {
	
	boolean stop = false;	// 반복문을 종료시 사용
	boolean work = true;	// yield()를 사용하기위한 변수
	
	public ThreadA() {
		setName("ThreadA");
	}
	
	@Override
	public void run() {
		while(!stop) {
			if(work) {
				System.out.println(getName() + " 동작");
			} else {
				Thread.yield();
			}
			ThreadYieldMain.delay(500);
		}
		System.out.println(getName() + " 종료");
	}
	
}



package test.chapter12.example04;
public class ThreadB extends Thread {

	boolean stop = false;	// 반복문을 종료시 사용
	boolean work = true;	// yield()를 사용하기위한 변수
	
	public ThreadB() {
		setName("ThreadB");
	}
	
	@Override
	public void run() {
		while(!stop) {
			if(work) {
				System.out.println(getName() + " 동작");
			} else {
				Thread.yield();
			}
			ThreadYieldMain.delay(500);
		}
		System.out.println(getName() + " 종료");
	}
}



package test.chapter12.example04;
public class ThreadYieldMain {
	
	// sleep() 메서드 사용시 try-catch를 사용하지 않기위한 메서드
	public static void delay(int mills) {
		try {
			Thread.sleep(mills);
		} catch (InterruptedException e) {
		}
	}
	
	public static void main(String[] args) {
		
		ThreadA threadA = new ThreadA();
		ThreadB threadB = new ThreadB();
		
		threadA.start();
		threadB.start();
		
		delay(5000);
		threadA.work = false;
		
		delay(5000);
		threadA.work = true;
		
		delay(5000);
		threadB.work = false;
		
		delay(5000);
		threadB.work = true;
		
		delay(5000);
		threadA.stop = true;
		threadB.stop = true;
		
	}
}


ThreadA 동작
ThreadB 동작
ThreadA 동작
ThreadB 동작
ThreadB 동작
ThreadB 동작
ThreadB 동작
ThreadB 동작
ThreadA 동작
ThreadB 동작
ThreadA 동작
ThreadB 동작
ThreadA 동작
ThreadA 동작
ThreadA 동작
ThreadA 동작
ThreadA 동작
ThreadB 동작
ThreadA 동작
ThreadB 동작
ThreadA 종료
ThreadB 종료


                 


====================================================================================================

	# 다른 쓰레드의 종료를 기다림 ( join() )

쓰레드는 다른 쓰레드와 독립적으로 실행히는 것이 기본이지만 
다른 쓰레드가 종료될 때까지 기다렸다가 실행해야 히는 경우가 발생할 수도 있다.   
예를 들어 계산 작업을 하는 쓰레드 모든 계산 작업을 마쳤을 때, 계산 결과 값을 받아 이용하는 경우가 이에 해당 된다. 
이런 경우를 위해서 Thread는 join() 메소드를 제공하고 있다. 다음 그림을 보고 이해해 보자. 

Thread.A가 ThreadB의 join() 메소드를 호출하면 Thread.A는 ThreadB가 종료할 때까지 일시 정지 상태가 된다. 
ThreadB의 run() 메소드가 종료되면 비로소 Thread.A는 일시 정지에서 풀려 다음 코드를 실행하게 된다.

		# ThreadA					# ThreadB
		threadB.start();					run();
		threadB.join(); 	// ThreadA가 join된다.

-join()메서드는 호출한 쓰레드가 join되어 기다린다.
-쓰레드 자신이 하던 작업을 잠시 멈추고 다른 쓰레드가 지정된 시간동안 작업을 수행하도록 할 때 join()을 사용한다.
-시간을 지정하지 않으면, 해당 쓰레드가 작업을 모두 마칠 때까지 기다리게 된다.
-작업 중에 다른 쓰레드의 작업이 먼저 수행되어야할 필요가 있을 때 join()을 사용한다.
-join()도 interrupt()에 의해 대기상태에서 벗어날 수 있으며, try-catch문으로 감싸야한다.

-sleep()과 다른점은 현재 쓰레드가 아닌 특정 쓰레드에 대해 동작한다.
 (sleep()은 static메서드로 현재 실행중인 쓰레드에 동작)


	void join()
	void join(long millis)
	void join(long millis, int nanos)





public class SumThread extends Thread {

	private int sum;	// 연산의 합을 구하기위한 필드

	public int getSum() {
		return sum;
	}

	public void setSum(int sum) {
		this.sum = sum;
	}
	
	@Override 
	public void run() {	// 1부터 10000까지의 합
		for(int i = 0; i < 10000; i++) {
			this.sum += i;
		}
	}
}


public class JoinMain {

	static long startTime = 0;

	public static void main(String args[]) {
		ThreadA th1 = new ThreadA();	// ThreadA 쓰레드 생성
		ThreadB th2 = new ThreadB();	// ThreadB 쓰레드 생성
		th1.start();	// th1 쓰레드 시작
		th2.start();	// th2 쓰레드 시작

		// 시간 측정을 위한 시작 시간 (h1, h2 쓰레드가 동작하는 시간을 측정하기위한 설정)
		startTime = System.currentTimeMillis();
		try {
			th1.join();	// th1 쓰레드의 작업이 끝날 때까지 기다린다.
			th2.join();	// th2 쓰레드의 작업이 끝날 때까지 기다린다.
		} catch(InterruptedException e) {}
		System.out.print("소요시간:" + (System.currentTimeMillis() - startTime));	// 종료 시간 측정
	}
}









-"보스를 처치했습니다." 메세지가 출력되어야 한다.
-메세지 출력후 "엔딩화면 출력중 종료까지 10초 남았습니다." 메세지가 출력되어야 한다.
-이후 9초, 8초 ... 1초까지 카운트다운이 진행되어야 한다.
-카운트다운이 끝날 때까지 다음 단계로 넘어가면 안된다.
-이를 위해 join()을 사용하여 카운트다운이 끝날 때까지 main 스레드를 대기시켜야 한다.
-카운트다운이 끝난 후 플레이어의 이름을 입력하는 창이 떠야 한다.
-입력된 플레이어 이름을 콘솔에 출력되어야 한다.


public class EndingCountDown extends Thread {
	
	@Override
	public void run() {
		for(int i = 10; i >= 0; i--) {
			System.out.println("엔딩화면 출력중 종료까지 " + i + "초 남았습니다.");
			EndingPlayerNameMain.delay(1000);
		}
		System.out.println("엔딩 장면 종료");
	}
}



import javax.swing.JOptionPane;
public class PlayerNameInput extends Thread {
	
	private String playerName;

	@Override
	public void run() {
		System.out.println("게임을 클리어 하셨습니다. 이름을 남겨주세요");
		
		String inputName = JOptionPane.showInputDialog("저장할 이름 입력");
		
		if(inputName != null && !inputName.equals("")) {
			this.playerName = inputName;
		} else {
			this.playerName = "알수없음";
		}
		System.out.println("입력한 이름 : " + this.playerName);
	}
}



public class EndingPlayerNameMain {
	
	public static void delay(int mills) {
		try {
			Thread.sleep(mills);
		} catch (InterruptedException e) {
		}
	}
	
	public static void main(String[] args) {
		
		System.out.println("보스를 처치했습니다.");
		
		Thread ecd = new EndingCountDown();
		PlayerNameInput pni = new PlayerNameInput();
		
		ecd.start();
		
		try {
			ecd.join();
		} catch (InterruptedException e) {;
		}
		
		pni.start();
	}
}








====================================================================================================

 			## 스레드 간 협업( wait(), notify(), notifyAll() )

-경우에 따라서는 두 개의 스레드를 교대로 번갈아가며 실행해야 할 경우가 있다. 
-정확한 교대 작업이 필요할 경우, 자신의 작업이 끝나면 상대방 스레드를 일시 정지 상태에서 풀어주고, 
 자신은 일시정지 상태로 만드는 것이다. 

-이 방법의 핵심은 공유 객체에 있다. 
-공유 객체는 두 스레드가 작업할 내용을 각각 동기화 메소드로 구분해 놓는다. 
-한 스레드가 작업을 완료하면 notify() 메소드를 호출해서 일시 정지 상태에 있는 다른 스레드를 실행 대기 상태로 들고， 
 자신은 두 번 작업을 하지 않도록 wait() 메소드를 호출하여 일시 정지 상태로 만든다. 

		

-만약 wait() 대신 wait(long timeout) 이나, wait(long timeout, int nanos)를 사용하면 
  notify() 를 호출하지 않아도 지정된 시간이 지나면 스레드가 자동적으로 실행 대기 상태가 된다. 
-notify() 메소드와 통일한 역할을 하는 notifyAll() 메소드도 있는데, 
  notify()는 wait()에 의해 일시 정지된 스레드 중 한 개를 실행 대기 상태로 만들고， 
  notifyAll () 메소드는 wait()에 의해 일시 정지된 모든 스레드들을 실행 대기 상태로 만든다. 
-이 메소드들은 Thread 클래스의 메소드가 아닌 Object 클래스에 선언된 메소드이므로 모든 공유 객체에서 호출이 기능하다. 
-주의할 점은 이 메소드들은 동기화 메소드 또는 동기화 블록 내에서만 사용할 수 있다. 


package test.chapter12.example06;
public class WorkThread {

	// 공유 자원
	public synchronized void methodA() {
		System.out.println("methodA 호출");
		notify();	// 일시정지 상태인 쓰레드를 실행대기 상태로 전환
		
		try {
			wait();	// 자신을 일시 정지상태(WAITING)상태로 전환
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	// 공유 자원
	public synchronized void methodB() {
		System.out.println("methodB 호출");
		notify();	// 일시정지 상태인 쓰레드를 실행대기 상태로 전환
		
		try {
			wait();	// 자신을 일시 정지상태(WAITING)상태로 전환
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}




package test.chapter12.example06;
public class ThreadA extends Thread {
	
	WorkThread workThread;
	
	public ThreadA(WorkThread workThread) {	// 생성자
		this.workThread = workThread;
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 5; i++) {
			workThread.methodA();
		}
	}
}



package test.chapter12.example06;
public class ThreadB extends Thread {
	WorkThread workThread;
	
	public ThreadB(WorkThread workThread) {
		this.workThread = workThread;
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 5; i++) {
			workThread.methodB();
		}
	}
}



package test.chapter12.example06;
public class WorkThreadMain {
	public static void main(String[] args) {
		
		WorkThread wt = new WorkThread();
		
		ThreadA threadA = new ThreadA(wt);
		ThreadB threadB = new ThreadB(wt);
		
		threadA.start();
		threadB.start();
	}
}

methodA 호출
methodB 호출
methodA 호출
methodB 호출
methodA 호출
methodB 호출
methodA 호출
methodB 호출
methodA 호출
methodB 호출





package test.chapter12.example06;
public class DataBox {
	
	private String data;	// null
	
	public synchronized void setData(String data) {
		if(this.data != null) {
			try {
				wait();
			} catch (InterruptedException e) {
			}
		}
		this.data = data;
		notify();
	}
	
	public synchronized String getData() {
		if(data == null) {
			try {
				wait();
			} catch (InterruptedException e) {
			}
		}
		String dataValue = this.data;
		this.data = null;
		notify();
		return dataValue;
	}
}





package test.chapter12.example06;
import java.text.SimpleDateFormat;
import java.util.Date;
public class ProductThread extends Thread {

	private DataBox dataBox;	// 0x100
	
	public ProductThread(DataBox dataBox) {
		this.dataBox = dataBox;
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 5; i++) {
			Date day = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd hh:mm:ss");
			String nowDate = sdf.format(day);
			String data = "Data" + (i + 1) + " 생성일(" + nowDate + ")";
			dataBox.setData(data);
			System.out.println(data + "생성");
			for(int j = 0; j < 2000000000; j++) {
			}
		}
	}
}






package test.chapter12.example06;
public class CustomerThread extends Thread {
	
	private DataBox dataBox;	// 0x100
	
	public CustomerThread(DataBox dataBox) {
		this.dataBox = dataBox;
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 5; i++) {
			String data = dataBox.getData();
			data += "-다운로드";
			System.out.println(data);
			
			for(int j = 0; j < 2000000000; j++) {
			}
		}
	}
}




package test.chapter12.example06;
public class DataBoxMain {
	public static void main(String[] args) {
		
		DataBox dataBax = new DataBox();
		
		ProductThread pt = new ProductThread(dataBax);
		CustomerThread ct = new CustomerThread(dataBax);

		pt.start();
		ct.start();
	}
}




Data1 생성일(25/02/21 02:44:30)생성
Data1 생성일(25/02/21 02:44:30)-다운로드
Data2 생성일(25/02/21 02:44:30)생성
Data2 생성일(25/02/21 02:44:30)-다운로드
Data3 생성일(25/02/21 02:44:31)생성
Data3 생성일(25/02/21 02:44:31)-다운로드
Data4 생성일(25/02/21 02:44:32)생성
Data4 생성일(25/02/21 02:44:32)-다운로드
Data5 생성일(25/02/21 02:44:32)생성
Data5 생성일(25/02/21 02:44:32)-다운로드







====================================================================================================

			##  스레드의 안전한 종료( stop 플래그, interrupt() ) 


	# stop 플래그

-스레드는 자신의 run() 메소드가 모두 실행되면 자동적으로 종료된다. 
-경우에 따라서는 실행 중인 스레드를 즉시 종료할 필요가 있다. 
-예를 들어 동영상을 끝까지 보지 않고, 사용자가 멈춤을 요구할 수 있다. 
-Thread는 스레드를 즉시 종료시키기 위해서 stop() 메소드를 제공하고 있는데, 이 메소드는 deprecated 되었다. 
-stop() 메소드로 스레드를 갑자기 종료하게 되면 스레드가 사용 중이던 자원들이 불안전한 상태로 남겨지기 때문이다.



	# stop 플래그를 이용하는 방법 

-스레드는 run() 메소드가 끝나면 자동으로 종료되므로, run() 메소드가 정상적으로 종료되도록 유도하는 것이 가장 좋다.


	public class StopThread extends Thread ( 

		private boolean stop;	// stop 플래그 필드 

		public void run() ( 
			while( !stop ) {	// stop이 true가 되면 run()이 종료된다.
				//스레드가 반복 실행하는 코드; 
			}
			// 스레드가 사용한 자원 정리
		}
	}


-위 코드에서 stop 필드가 false 일 경우에는 while문의 조건식이 true 가 되어 반복 실행하지만, 
 stop 필드가 true 일 경우에는 whi1문의 조건식이 false 가 되어 whi1 문을 빠져나온다. 
 그리고 스레드가 사용한 자원을 정리하고 run() 메소드가 끝나게 됨으로써 스레드는 안전하게 종료된다. 




package test.chapter12.example06;
public class PrintThread1 extends Thread {

	private boolean stop = false;
	
	public void setStop(boolean stop) {
		this.stop = stop;
	}
	
	@Override
	public void run() {
		while(!stop) {
			System.out.println("실행할 내용 실행중");
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("자원 정리");	// 반복문이 종료시 해당 자원을 처리하고 쓰레드가 종료된다.
		System.out.println("쓰레드 종료");
	}
}







package test.chapter12.example06;
public class PrintThreadMain {
	public static void main(String[] args) {
		
		PrintThread1 pt1 = new PrintThread1();
		
		pt1.start();
		
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		pt1.setStop(true);
	}
}




실행할 내용 실행중
실행할 내용 실행중
실행할 내용 실행중
실행할 내용 실행중
실행할 내용 실행중
자원 정리
쓰레드 종료










	# interrupt() 메소드

-interrupt() 메소드는 쓰레드가 일시 정지 상태에 있을 때 InterruptedException 예외를 발생시키는 역할을 한다. 
 이것을 이용하면 run() 메소드를 정상 종료시킬 수 있다. 

-ThreadA가 ThreadB의 interrupt() 메서드를 실행하게 되면 ThreadB가 sleep() 메서드로 
 일시 정지 상태가 될 때 ThreadB에서 InterruptedException이 발생하여 예외 처리(catch) 블록으로 이동한다. 
-결국 ThreadB는 while문을 빠져나와 run() 메서드를 정상 종료하게 된다. 



		# ThreadA
	ThreadB threadB = new ThreadB(); 
	threadB.start();
	        ...
	threadB.interrupt();




		# ThreadB
	public void run() { 
		try  (
			while( true ) {
				Thread.sleep(1);  // interrupt(); 호출시 sleep()이 해제된다.
			}
		} catch (InterruptedException e) (
		} 
		//쓰레드가 사용한 자원 정리
	}

-주목할 점은 스레드가 실행 대기 또는 실행 상태에 있을 때 interrupt() 메서드가 실행되면 
  즉시 InterruptedException 예외가 발생하지 않고, 스레드가 미래에 일시 정지 상태가 되면 
  InterruptedException 예외가 발생하는 것이다. 
  따라서 스레드가 일시 정지 상태가 되지 않으면 interrupt() 메서드 호출은 아무런 의미가 없다. 
  그래서 짧은 시간이나마 일시 정지시키기 위해 Thread.sleep(1)을 사용한 것이다.

-일시 정지를 만들지 않고도 interrupt() 호출 여부를 알 수 있는 방법이 있다. 
-interrupt() 메서드가 호출되었다면 스레드의 interrupted()와 isInterrupted() 메서드는 true를 리턴한다.
-interrupted()는 정적 메서드로 현재 스레드가 interrupted 되었는지 확인하는 것이고,
-isInterrupted()는 인스턴스 메서드로 현재 스레드가 interrupted되었는지 확인할 때 사용한다.





package test.chapter12.example06;
public class PrintThread1 extends Thread {

	private boolean stop = false;
	
	public void setStop(boolean stop) {
		this.stop = stop;
	}
	
	@Override
	public void run() {
		while(!stop) {
			System.out.println("실행할 내용 실행중");
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("자원 정리");	// 반복문이 종료시 해당 자원을 처리하고 쓰레드가 종료된다.
		System.out.println("쓰레드 종료");
	}
}



package test.chapter12.example06;
public class PrintThreadMain {
	public static void main(String[] args) {
		
		PrintThread2 pt2 = new PrintThread2();
		
		pt2.start();
		
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		System.out.println("pt2 : " + pt2.isInterrupted());
		
		pt2.interrupt();// interruptedException 발생
		System.out.println("pt2 : " + pt2.isInterrupted());
		
	}
}





















public class InterreptThread extends Thread {
	
	@Override
	public void run() {
		
		int number = 10;
		
		while(number != 0 && !isInterrupted()) {
			System.out.println("카운드 다운 : " + number);
			number--;
			for(int i = 0; i < 2100000000; i++) {
			}
		}
		System.out.println("카운트 다운이 종료되었습니다.");
	}
}





package test.chapter12.example07;

import javax.swing.JOptionPane;

public class InterreptThreadMain {
	public static void main(String[] args) {
		InterreptThread it = new InterreptThread();
		it.start();
		
		boolean result1 = it.isInterrupted();
		if(result1) {
			System.out.println("it 쓰레드는 interrupt 되었습니다.");
		} else {
			System.out.println("it 쓰레드는 interrupt 되지 않았습니다.");
		}
		
		String input = JOptionPane.showInputDialog("값 입력시 카운트 다운 중지");
		System.out.println("입력값 : " + input);
		
		it.interrupt();
		
		result1 = it.isInterrupted();
		if(result1) {
			System.out.println("it 쓰레드는 interrupt 되었습니다.");
		} else {
			System.out.println("it 쓰레드는 interrupt 되지 않았습니다.");
		}
	}
}

































