		# 쓰레드 우선순위

-작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업을 갖게 할 수 있다.
 
-멀티 쓰레드는 동시성 (Concurrency) 또는 병렬성 (Parallelism) 으로 실행되기 때문에 
 이 용어들에 대해 정확히 이해하는 것이 좋다. 

-동시성은 멀티 작업을 위해 하나의 코어에서 멀티 쓰레드가 번갈아가며 실행하는 성질을 말하고 
 병렬성은 멀티 작업을 위해 멀티 코어에서 개별 쓰레드를 동시에 실행하는 성질을 말한다.
 
-사실은 번갈아 가며 실행하는 동시성 작업이다.  
-번갈아 실행하는 것이 워닥 빠르다보니 병렬성으로 보일 뿐이다.

-쓰레드의 개수가 코어의 수보다 많을 경우, 쓰레드를 어떤 순서에 의해 동시성으로 실행할 것인가를 결정해야 하는데,
 이것을 쓰레드 스케줄링이라고 한다. 
-쓰레드 스케줄링에 의해 쓰레드들은 아주 짧은 시간에 번갈아가면서 그들의 run() 메소드를 조금씩 실행한다.
                              
-자바의 쓰레드 스케줄링은 우선순위 (Priority)방식과 순환 할당(Round- Robin) 방식을 사용한다. 
-우선순위 방식은 우선순위가 높은 쓰레드가 실행 상태를 더 많이 가지도록 스케줄링히는 것을 말한다. 
-순환 할당 방식은 시간 할딩량(Time Slice)을 정해서 하나의 쓰레드를 정해진 시간만큼 실행하고 
 다시 다른 쓰레드를 실행하는 방식을 말한다. 
-쓰레드 우선순위 방식은 쓰레드 객체에 우선순위 번호를 부여할 수 있기 때문에 개발자가 코드로 제어할 수 있다. 
 하지만 순환할당 방식은 자바 가상 기계에 의해서 정해지기 때문에 코드로 제어할 수 없다.
-우선순위 방식에서 우선순위는 1에서부터 10까지 부여되는데, 1이 가장 우선순위가 낮고, 10이가장 높다. 
-우선순위를 부여하지 않으면 모든 쓰레드들은 기본적으로 5의 우선순위를 할당받는다. 
-만약 우선순위를 변경하고 싶다면 Thread 클래스가 제공히는 setPriority() 메소드를 이용하면된다.

	thread.setPriority(우선순위);	// 우선순위값 적용
	thread.getPriority();		// 우선순위값 확인


-우선순위가 높은 쓰레드가 실행 기회를 더 많이 가지기 때문에 우선순위가 낮은 쓰레드보다 계산 작업을빨리 끝낸다.
-쿼드 코어일 경우에는 4개의 쓰레드가 병렬성으로 실행될 수 있기 때문에 
  4개 이하의 쓰레드를 실행할 경우에는 우선순위 방식이 크게 영향을 미치지 못한다. 
-최소한 5개 이상의 쓰레드가 실행되어야 우선순위의 영향을 받는다. 





public class ThreadA extends Thread {

	@Override
	public void run() {
		for(int i = 0; i < 1000; i++) {
			System.out.print("#");
			for(int j = 0; j < 100000000; j++) {	// 시간 지연용 반복문
			}
		}
		System.out.println("ThreadA 종료");
	}
}


public class ThreadB extends Thread {

	@Override
	public void run() {
		for(int i = 0; i < 1000; i++) {
			System.out.print("*");
			for(int j = 0; j < 100000000; j++) {	// 시간 지연용 반복문
			}
		}
		System.out.println("ThreadB 종료");
	}
}



public class ThreadPriorityExample {
	public static void main(String[] args) {
		Thread threadA = new ThreadA();
		Thread threadB = new ThreadB();
		
		int result1 = threadA.getPriority();
		System.out.println("ThreadA 기본 우선순위 값 : " + result1);
		threadA.setPriority(5);
		result1 = threadA.getPriority();
		System.out.println("ThreadA 현재 우선순위 값 : " + result1);
		System.out.println();
		
		int result2 = threadA.getPriority();
		System.out.println("ThreadB 기본 우선순위 값 : " + result2);
		threadB.setPriority(9);
		result2 = threadB.getPriority();
		System.out.println("ThreadB 현재 우선순위 값 : " + result2);
		
		threadA.start();
		threadB.start();
	}
}


ThreadA 기본 우선순위 값 : 5
ThreadA 현재 우선순위 값 : 5

ThreadB 기본 우선순위 값 : 5
ThreadB 현재 우선순위 값 : 9
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#**#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*##*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#**#*#*#**#**#**#*#*#*#*#*#*#*#*#*#*#*#**#*#*#*#*#ThreadB 종료
####ThreadA 종료







================================================================================================


public class CalThread extends Thread {

	public CalThread(String name) {	// 생성자 (쓰레드 이름을 매개변수로 받는다.)
		setName(name);
	}
	
	@Override
	public void run() {
		for(int i = 0; i < 2100000000L; i++) {	// 시간 지연용 반복문
		}
		String threadName = getName();
		System.out.println(threadName + " 이 출력");
	}
}

public class CalThreadMain {
	public static void main(String[] args) {
		
		for(int i = 1; i <= 10; i++) {
			Thread thread = new CalThread("thread-" + i);
			
			if(i != 10) {
				thread.setPriority(1);
			} else {
				thread.setPriority(10);
			}
			
			thread.start();
		}
	}
}



thread-10 이 출력
thread-2 이 출력
thread-4 이 출력
thread-5 이 출력
thread-3 이 출력
thread-9 이 출력
thread-7 이 출력
thread-8 이 출력
thread-1 이 출력
thread-6 이 출력



================================================================================================


public class WorkThread extends Thread {
	
	public WorkThread(String name, int priority) {
		setName(name);			// 쓰레드 이름 설정
		setPriority(priority);	// 쓰레드 우선순위값 설정
	}

	@Override
	public void run() {
		long count = 0;
		int num = getPriority();	// 우선순위값에 따라 반복횟수 증가
		for(int i = 0; i < 100000000 * num; i ++) {
			count++;
		}
		System.out.println(getName() + " , " + getPriority() + " : 종료");
	}
}


package test.chapter12.example03;
public class WorkThreadMain {
	public static void main(String[] args) {
		
		for(int i = 1; i <= 10; i++) {
			Thread thread = new WorkThread("thread-" + i , i);
			thread.start();
		}
	}
}


thread-7 , 7 : 종료
thread-5 , 5 : 종료
thread-8 , 8 : 종료
thread-10 , 10 : 종료
thread-6 , 6 : 종료
thread-9 , 9 : 종료
thread-2 , 2 : 종료
thread-4 , 4 : 종료
thread-3 , 3 : 종료
thread-1 , 1 : 종료




